// Code generated by counterfeiter. DO NOT EDIT.
package clusterfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops/core/clustersmngr/cluster"
	"github.com/weaveworks/weave-gitops/pkg/server/auth"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeCluster struct {
	GetHostStub        func() string
	getHostMutex       sync.RWMutex
	getHostArgsForCall []struct {
	}
	getHostReturns struct {
		result1 string
	}
	getHostReturnsOnCall map[int]struct {
		result1 string
	}
	GetNameStub        func() string
	getNameMutex       sync.RWMutex
	getNameArgsForCall []struct {
	}
	getNameReturns struct {
		result1 string
	}
	getNameReturnsOnCall map[int]struct {
		result1 string
	}
	GetServerClientStub        func() (client.Client, error)
	getServerClientMutex       sync.RWMutex
	getServerClientArgsForCall []struct {
	}
	getServerClientReturns struct {
		result1 client.Client
		result2 error
	}
	getServerClientReturnsOnCall map[int]struct {
		result1 client.Client
		result2 error
	}
	GetServerClientsetStub        func() (kubernetes.Interface, error)
	getServerClientsetMutex       sync.RWMutex
	getServerClientsetArgsForCall []struct {
	}
	getServerClientsetReturns struct {
		result1 kubernetes.Interface
		result2 error
	}
	getServerClientsetReturnsOnCall map[int]struct {
		result1 kubernetes.Interface
		result2 error
	}
	GetServerConfigStub        func() (*rest.Config, error)
	getServerConfigMutex       sync.RWMutex
	getServerConfigArgsForCall []struct {
	}
	getServerConfigReturns struct {
		result1 *rest.Config
		result2 error
	}
	getServerConfigReturnsOnCall map[int]struct {
		result1 *rest.Config
		result2 error
	}
	GetUserClientStub        func(*auth.UserPrincipal) (client.Client, error)
	getUserClientMutex       sync.RWMutex
	getUserClientArgsForCall []struct {
		arg1 *auth.UserPrincipal
	}
	getUserClientReturns struct {
		result1 client.Client
		result2 error
	}
	getUserClientReturnsOnCall map[int]struct {
		result1 client.Client
		result2 error
	}
	GetUserClientsetStub        func(*auth.UserPrincipal) (kubernetes.Interface, error)
	getUserClientsetMutex       sync.RWMutex
	getUserClientsetArgsForCall []struct {
		arg1 *auth.UserPrincipal
	}
	getUserClientsetReturns struct {
		result1 kubernetes.Interface
		result2 error
	}
	getUserClientsetReturnsOnCall map[int]struct {
		result1 kubernetes.Interface
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCluster) GetHost() string {
	fake.getHostMutex.Lock()
	ret, specificReturn := fake.getHostReturnsOnCall[len(fake.getHostArgsForCall)]
	fake.getHostArgsForCall = append(fake.getHostArgsForCall, struct {
	}{})
	stub := fake.GetHostStub
	fakeReturns := fake.getHostReturns
	fake.recordInvocation("GetHost", []interface{}{})
	fake.getHostMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCluster) GetHostCallCount() int {
	fake.getHostMutex.RLock()
	defer fake.getHostMutex.RUnlock()
	return len(fake.getHostArgsForCall)
}

func (fake *FakeCluster) GetHostCalls(stub func() string) {
	fake.getHostMutex.Lock()
	defer fake.getHostMutex.Unlock()
	fake.GetHostStub = stub
}

func (fake *FakeCluster) GetHostReturns(result1 string) {
	fake.getHostMutex.Lock()
	defer fake.getHostMutex.Unlock()
	fake.GetHostStub = nil
	fake.getHostReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCluster) GetHostReturnsOnCall(i int, result1 string) {
	fake.getHostMutex.Lock()
	defer fake.getHostMutex.Unlock()
	fake.GetHostStub = nil
	if fake.getHostReturnsOnCall == nil {
		fake.getHostReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getHostReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeCluster) GetName() string {
	fake.getNameMutex.Lock()
	ret, specificReturn := fake.getNameReturnsOnCall[len(fake.getNameArgsForCall)]
	fake.getNameArgsForCall = append(fake.getNameArgsForCall, struct {
	}{})
	stub := fake.GetNameStub
	fakeReturns := fake.getNameReturns
	fake.recordInvocation("GetName", []interface{}{})
	fake.getNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCluster) GetNameCallCount() int {
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	return len(fake.getNameArgsForCall)
}

func (fake *FakeCluster) GetNameCalls(stub func() string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = stub
}

func (fake *FakeCluster) GetNameReturns(result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	fake.getNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCluster) GetNameReturnsOnCall(i int, result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	if fake.getNameReturnsOnCall == nil {
		fake.getNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeCluster) GetServerClient() (client.Client, error) {
	fake.getServerClientMutex.Lock()
	ret, specificReturn := fake.getServerClientReturnsOnCall[len(fake.getServerClientArgsForCall)]
	fake.getServerClientArgsForCall = append(fake.getServerClientArgsForCall, struct {
	}{})
	stub := fake.GetServerClientStub
	fakeReturns := fake.getServerClientReturns
	fake.recordInvocation("GetServerClient", []interface{}{})
	fake.getServerClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCluster) GetServerClientCallCount() int {
	fake.getServerClientMutex.RLock()
	defer fake.getServerClientMutex.RUnlock()
	return len(fake.getServerClientArgsForCall)
}

func (fake *FakeCluster) GetServerClientCalls(stub func() (client.Client, error)) {
	fake.getServerClientMutex.Lock()
	defer fake.getServerClientMutex.Unlock()
	fake.GetServerClientStub = stub
}

func (fake *FakeCluster) GetServerClientReturns(result1 client.Client, result2 error) {
	fake.getServerClientMutex.Lock()
	defer fake.getServerClientMutex.Unlock()
	fake.GetServerClientStub = nil
	fake.getServerClientReturns = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetServerClientReturnsOnCall(i int, result1 client.Client, result2 error) {
	fake.getServerClientMutex.Lock()
	defer fake.getServerClientMutex.Unlock()
	fake.GetServerClientStub = nil
	if fake.getServerClientReturnsOnCall == nil {
		fake.getServerClientReturnsOnCall = make(map[int]struct {
			result1 client.Client
			result2 error
		})
	}
	fake.getServerClientReturnsOnCall[i] = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetServerClientset() (kubernetes.Interface, error) {
	fake.getServerClientsetMutex.Lock()
	ret, specificReturn := fake.getServerClientsetReturnsOnCall[len(fake.getServerClientsetArgsForCall)]
	fake.getServerClientsetArgsForCall = append(fake.getServerClientsetArgsForCall, struct {
	}{})
	stub := fake.GetServerClientsetStub
	fakeReturns := fake.getServerClientsetReturns
	fake.recordInvocation("GetServerClientset", []interface{}{})
	fake.getServerClientsetMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCluster) GetServerClientsetCallCount() int {
	fake.getServerClientsetMutex.RLock()
	defer fake.getServerClientsetMutex.RUnlock()
	return len(fake.getServerClientsetArgsForCall)
}

func (fake *FakeCluster) GetServerClientsetCalls(stub func() (kubernetes.Interface, error)) {
	fake.getServerClientsetMutex.Lock()
	defer fake.getServerClientsetMutex.Unlock()
	fake.GetServerClientsetStub = stub
}

func (fake *FakeCluster) GetServerClientsetReturns(result1 kubernetes.Interface, result2 error) {
	fake.getServerClientsetMutex.Lock()
	defer fake.getServerClientsetMutex.Unlock()
	fake.GetServerClientsetStub = nil
	fake.getServerClientsetReturns = struct {
		result1 kubernetes.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetServerClientsetReturnsOnCall(i int, result1 kubernetes.Interface, result2 error) {
	fake.getServerClientsetMutex.Lock()
	defer fake.getServerClientsetMutex.Unlock()
	fake.GetServerClientsetStub = nil
	if fake.getServerClientsetReturnsOnCall == nil {
		fake.getServerClientsetReturnsOnCall = make(map[int]struct {
			result1 kubernetes.Interface
			result2 error
		})
	}
	fake.getServerClientsetReturnsOnCall[i] = struct {
		result1 kubernetes.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetServerConfig() (*rest.Config, error) {
	fake.getServerConfigMutex.Lock()
	ret, specificReturn := fake.getServerConfigReturnsOnCall[len(fake.getServerConfigArgsForCall)]
	fake.getServerConfigArgsForCall = append(fake.getServerConfigArgsForCall, struct {
	}{})
	stub := fake.GetServerConfigStub
	fakeReturns := fake.getServerConfigReturns
	fake.recordInvocation("GetServerConfig", []interface{}{})
	fake.getServerConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCluster) GetServerConfigCallCount() int {
	fake.getServerConfigMutex.RLock()
	defer fake.getServerConfigMutex.RUnlock()
	return len(fake.getServerConfigArgsForCall)
}

func (fake *FakeCluster) GetServerConfigCalls(stub func() (*rest.Config, error)) {
	fake.getServerConfigMutex.Lock()
	defer fake.getServerConfigMutex.Unlock()
	fake.GetServerConfigStub = stub
}

func (fake *FakeCluster) GetServerConfigReturns(result1 *rest.Config, result2 error) {
	fake.getServerConfigMutex.Lock()
	defer fake.getServerConfigMutex.Unlock()
	fake.GetServerConfigStub = nil
	fake.getServerConfigReturns = struct {
		result1 *rest.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetServerConfigReturnsOnCall(i int, result1 *rest.Config, result2 error) {
	fake.getServerConfigMutex.Lock()
	defer fake.getServerConfigMutex.Unlock()
	fake.GetServerConfigStub = nil
	if fake.getServerConfigReturnsOnCall == nil {
		fake.getServerConfigReturnsOnCall = make(map[int]struct {
			result1 *rest.Config
			result2 error
		})
	}
	fake.getServerConfigReturnsOnCall[i] = struct {
		result1 *rest.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetUserClient(arg1 *auth.UserPrincipal) (client.Client, error) {
	fake.getUserClientMutex.Lock()
	ret, specificReturn := fake.getUserClientReturnsOnCall[len(fake.getUserClientArgsForCall)]
	fake.getUserClientArgsForCall = append(fake.getUserClientArgsForCall, struct {
		arg1 *auth.UserPrincipal
	}{arg1})
	stub := fake.GetUserClientStub
	fakeReturns := fake.getUserClientReturns
	fake.recordInvocation("GetUserClient", []interface{}{arg1})
	fake.getUserClientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCluster) GetUserClientCallCount() int {
	fake.getUserClientMutex.RLock()
	defer fake.getUserClientMutex.RUnlock()
	return len(fake.getUserClientArgsForCall)
}

func (fake *FakeCluster) GetUserClientCalls(stub func(*auth.UserPrincipal) (client.Client, error)) {
	fake.getUserClientMutex.Lock()
	defer fake.getUserClientMutex.Unlock()
	fake.GetUserClientStub = stub
}

func (fake *FakeCluster) GetUserClientArgsForCall(i int) *auth.UserPrincipal {
	fake.getUserClientMutex.RLock()
	defer fake.getUserClientMutex.RUnlock()
	argsForCall := fake.getUserClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCluster) GetUserClientReturns(result1 client.Client, result2 error) {
	fake.getUserClientMutex.Lock()
	defer fake.getUserClientMutex.Unlock()
	fake.GetUserClientStub = nil
	fake.getUserClientReturns = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetUserClientReturnsOnCall(i int, result1 client.Client, result2 error) {
	fake.getUserClientMutex.Lock()
	defer fake.getUserClientMutex.Unlock()
	fake.GetUserClientStub = nil
	if fake.getUserClientReturnsOnCall == nil {
		fake.getUserClientReturnsOnCall = make(map[int]struct {
			result1 client.Client
			result2 error
		})
	}
	fake.getUserClientReturnsOnCall[i] = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetUserClientset(arg1 *auth.UserPrincipal) (kubernetes.Interface, error) {
	fake.getUserClientsetMutex.Lock()
	ret, specificReturn := fake.getUserClientsetReturnsOnCall[len(fake.getUserClientsetArgsForCall)]
	fake.getUserClientsetArgsForCall = append(fake.getUserClientsetArgsForCall, struct {
		arg1 *auth.UserPrincipal
	}{arg1})
	stub := fake.GetUserClientsetStub
	fakeReturns := fake.getUserClientsetReturns
	fake.recordInvocation("GetUserClientset", []interface{}{arg1})
	fake.getUserClientsetMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCluster) GetUserClientsetCallCount() int {
	fake.getUserClientsetMutex.RLock()
	defer fake.getUserClientsetMutex.RUnlock()
	return len(fake.getUserClientsetArgsForCall)
}

func (fake *FakeCluster) GetUserClientsetCalls(stub func(*auth.UserPrincipal) (kubernetes.Interface, error)) {
	fake.getUserClientsetMutex.Lock()
	defer fake.getUserClientsetMutex.Unlock()
	fake.GetUserClientsetStub = stub
}

func (fake *FakeCluster) GetUserClientsetArgsForCall(i int) *auth.UserPrincipal {
	fake.getUserClientsetMutex.RLock()
	defer fake.getUserClientsetMutex.RUnlock()
	argsForCall := fake.getUserClientsetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCluster) GetUserClientsetReturns(result1 kubernetes.Interface, result2 error) {
	fake.getUserClientsetMutex.Lock()
	defer fake.getUserClientsetMutex.Unlock()
	fake.GetUserClientsetStub = nil
	fake.getUserClientsetReturns = struct {
		result1 kubernetes.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) GetUserClientsetReturnsOnCall(i int, result1 kubernetes.Interface, result2 error) {
	fake.getUserClientsetMutex.Lock()
	defer fake.getUserClientsetMutex.Unlock()
	fake.GetUserClientsetStub = nil
	if fake.getUserClientsetReturnsOnCall == nil {
		fake.getUserClientsetReturnsOnCall = make(map[int]struct {
			result1 kubernetes.Interface
			result2 error
		})
	}
	fake.getUserClientsetReturnsOnCall[i] = struct {
		result1 kubernetes.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCluster) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cluster.Cluster = new(FakeCluster)

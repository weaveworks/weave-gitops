// Code generated by counterfeiter. DO NOT EDIT.
package clustersmngrfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops/core/clustersmngr"
	"github.com/weaveworks/weave-gitops/core/clustersmngr/cluster"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeClientsPool struct {
	AddStub        func(client.Client, cluster.Cluster) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 client.Client
		arg2 cluster.Cluster
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	ClientStub        func(string) (client.Client, error)
	clientMutex       sync.RWMutex
	clientArgsForCall []struct {
		arg1 string
	}
	clientReturns struct {
		result1 client.Client
		result2 error
	}
	clientReturnsOnCall map[int]struct {
		result1 client.Client
		result2 error
	}
	ClientsStub        func() map[string]client.Client
	clientsMutex       sync.RWMutex
	clientsArgsForCall []struct {
	}
	clientsReturns struct {
		result1 map[string]client.Client
	}
	clientsReturnsOnCall map[int]struct {
		result1 map[string]client.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientsPool) Add(arg1 client.Client, arg2 cluster.Cluster) error {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 client.Client
		arg2 cluster.Cluster
	}{arg1, arg2})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1, arg2})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClientsPool) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeClientsPool) AddCalls(stub func(client.Client, cluster.Cluster) error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeClientsPool) AddArgsForCall(i int) (client.Client, cluster.Cluster) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClientsPool) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientsPool) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientsPool) Client(arg1 string) (client.Client, error) {
	fake.clientMutex.Lock()
	ret, specificReturn := fake.clientReturnsOnCall[len(fake.clientArgsForCall)]
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ClientStub
	fakeReturns := fake.clientReturns
	fake.recordInvocation("Client", []interface{}{arg1})
	fake.clientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClientsPool) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *FakeClientsPool) ClientCalls(stub func(string) (client.Client, error)) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = stub
}

func (fake *FakeClientsPool) ClientArgsForCall(i int) string {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	argsForCall := fake.clientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClientsPool) ClientReturns(result1 client.Client, result2 error) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	fake.clientReturns = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeClientsPool) ClientReturnsOnCall(i int, result1 client.Client, result2 error) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	if fake.clientReturnsOnCall == nil {
		fake.clientReturnsOnCall = make(map[int]struct {
			result1 client.Client
			result2 error
		})
	}
	fake.clientReturnsOnCall[i] = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeClientsPool) Clients() map[string]client.Client {
	fake.clientsMutex.Lock()
	ret, specificReturn := fake.clientsReturnsOnCall[len(fake.clientsArgsForCall)]
	fake.clientsArgsForCall = append(fake.clientsArgsForCall, struct {
	}{})
	stub := fake.ClientsStub
	fakeReturns := fake.clientsReturns
	fake.recordInvocation("Clients", []interface{}{})
	fake.clientsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClientsPool) ClientsCallCount() int {
	fake.clientsMutex.RLock()
	defer fake.clientsMutex.RUnlock()
	return len(fake.clientsArgsForCall)
}

func (fake *FakeClientsPool) ClientsCalls(stub func() map[string]client.Client) {
	fake.clientsMutex.Lock()
	defer fake.clientsMutex.Unlock()
	fake.ClientsStub = stub
}

func (fake *FakeClientsPool) ClientsReturns(result1 map[string]client.Client) {
	fake.clientsMutex.Lock()
	defer fake.clientsMutex.Unlock()
	fake.ClientsStub = nil
	fake.clientsReturns = struct {
		result1 map[string]client.Client
	}{result1}
}

func (fake *FakeClientsPool) ClientsReturnsOnCall(i int, result1 map[string]client.Client) {
	fake.clientsMutex.Lock()
	defer fake.clientsMutex.Unlock()
	fake.ClientsStub = nil
	if fake.clientsReturnsOnCall == nil {
		fake.clientsReturnsOnCall = make(map[int]struct {
			result1 map[string]client.Client
		})
	}
	fake.clientsReturnsOnCall[i] = struct {
		result1 map[string]client.Client
	}{result1}
}

func (fake *FakeClientsPool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientsPool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clustersmngr.ClientsPool = new(FakeClientsPool)

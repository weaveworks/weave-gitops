{
  "swagger": "2.0",
  "info": {
    "title": "Weave GitOps Core API",
    "description": "The API handles operations for Weave GitOps Core",
    "version": "0.1"
  },
  "tags": [
    {
      "name": "Core"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/child_objects": {
      "post": {
        "summary": "GetChildObjects returns the children of a given object,\nspecified by a GroupVersionKind.\nNot all Kubernets objects have children. For example, a Deployment\nhas a child ReplicaSet, but a Service has no child objects.",
        "operationId": "Core_GetChildObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetChildObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetChildObjectsRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/crd/is_available": {
      "get": {
        "summary": "IsCRDAvailable returns with a hashmap where the keys are the names of\nthe clusters, and the value is a boolean indicating whether given CRD is\ninstalled or not on that cluster.",
        "operationId": "Core_IsCRDAvailable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsCRDAvailableResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/events": {
      "get": {
        "summary": "ListEvents returns with a list of events",
        "operationId": "Core_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "involvedObject.kind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "involvedObject.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "involvedObject.namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "involvedObject.clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/featureflags": {
      "get": {
        "summary": "GetFeatureFlags returns configuration information about the server",
        "operationId": "Core_GetFeatureFlags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFeatureFlagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/flux_crds": {
      "get": {
        "operationId": "Core_ListFluxCrds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFluxCrdsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/flux_runtime_objects": {
      "get": {
        "summary": "ListFluxRuntimeObjects lists the flux runtime deployments from a cluster.",
        "operationId": "Core_ListFluxRuntimeObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFluxRuntimeObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/inventory": {
      "get": {
        "operationId": "Core_GetInventory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetInventoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "withChildren",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/namespace/flux": {
      "post": {
        "summary": "GetFluxNamespace returns with a namespace with a specific label.",
        "operationId": "Core_GetFluxNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFluxNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetFluxNamespaceRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/namespaces": {
      "get": {
        "summary": "ListNamespaces returns with the list of available namespaces.",
        "operationId": "Core_ListNamespaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListNamespacesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/object/{name}": {
      "get": {
        "summary": "GetObject gets data about a single primary object from a cluster.",
        "operationId": "Core_GetObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/objects": {
      "post": {
        "summary": "ListObjects gets data about primary objects.",
        "operationId": "Core_ListObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListObjectsRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/policies": {
      "get": {
        "summary": "ListPolicies list policies available on the cluster",
        "operationId": "Core_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/policies/{policyName}": {
      "get": {
        "summary": "GetPolicy gets a policy by name",
        "operationId": "Core_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/policyvalidations": {
      "post": {
        "summary": "ListPolicyValidations lists policy validations",
        "operationId": "Core_ListPolicyValidations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPolicyValidationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPolicyValidationsRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/policyvalidations/{validationId}": {
      "get": {
        "summary": "GetPolicyValidation gets a policy validation by id",
        "operationId": "Core_GetPolicyValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyValidationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "validationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "validationType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/reconciled_objects": {
      "post": {
        "summary": "GetReconciledObjects returns a list of objects that were created\nas a result of reconciling a Flux automation.\nThis list is derived by looking at the Kustomization or HelmRelease\nspecified in the request body.",
        "operationId": "Core_GetReconciledObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetReconciledObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetReconciledObjectsRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/runtime_crds": {
      "get": {
        "summary": "ListRuntimeCrds lists Weave GitOps runtime components CRDs.\nWeave GitOps runtime is composed of Flux runtime but also other components\nin the ecosystem like TF-controller or Policy Agent.",
        "operationId": "Core_ListRuntimeCrds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRuntimeCrdsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/runtime_objects": {
      "get": {
        "summary": "ListRuntimeObjects lists Weave GitOps runtime components.\nWeave GitOps runtime is composed of Flux runtime but also other components\nin the ecosystem like TF-controller or Policy Agent.",
        "operationId": "Core_ListRuntimeObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRuntimeObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/session_logs": {
      "post": {
        "summary": "GetSessionLogs returns the logs for a given session",
        "operationId": "Core_GetSessionLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSessionLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSessionLogsRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/suspend": {
      "post": {
        "summary": "ToggleSuspendResource suspends or resumes a flux object.",
        "operationId": "Core_ToggleSuspendResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ToggleSuspendResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ToggleSuspendResourceRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/sync": {
      "post": {
        "summary": "SyncResource forces a reconciliation of a Flux resource",
        "operationId": "Core_SyncFluxObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SyncFluxObjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SyncFluxObjectRequest"
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "summary": "GetVersion returns version information about the server",
        "operationId": "Core_GetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Core"
        ]
      }
    }
  },
  "definitions": {
    "CrdName": {
      "type": "object",
      "properties": {
        "plural": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ClusterNamespaceList": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "v1Crd": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/CrdName"
        },
        "version": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1Deployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suspended": {
          "type": "boolean"
        },
        "clusterName": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1Event": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1GetChildObjectsRequest": {
      "type": "object",
      "properties": {
        "groupVersionKind": {
          "$ref": "#/definitions/v1GroupVersionKind"
        },
        "namespace": {
          "type": "string"
        },
        "parentUid": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1GetChildObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Object"
          }
        }
      }
    },
    "v1GetFeatureFlagsResponse": {
      "type": "object",
      "properties": {
        "flags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1GetFluxNamespaceRequest": {
      "type": "object"
    },
    "v1GetFluxNamespaceResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1GetInventoryResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InventoryEntry"
          }
        }
      }
    },
    "v1GetObjectResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object"
        }
      }
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PolicyObj"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1GetPolicyValidationResponse": {
      "type": "object",
      "properties": {
        "validation": {
          "$ref": "#/definitions/v1PolicyValidation"
        }
      }
    },
    "v1GetReconciledObjectsRequest": {
      "type": "object",
      "properties": {
        "automationName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "automationKind": {
          "type": "string"
        },
        "kinds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GroupVersionKind"
          }
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1GetReconciledObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Object"
          }
        }
      }
    },
    "v1GetSessionLogsRequest": {
      "type": "object",
      "properties": {
        "sessionNamespace": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "logSourceFilter": {
          "type": "string"
        },
        "logLevelFilter": {
          "type": "string"
        }
      }
    },
    "v1GetSessionLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogEntry"
          }
        },
        "nextToken": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "logSources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetVersionResponse": {
      "type": "object",
      "properties": {
        "semver": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "buildTime": {
          "type": "string"
        },
        "kubeVersion": {
          "type": "string"
        }
      }
    },
    "v1GroupVersionKind": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "GroupVersionKind represents an objects Kubernetes API type data"
    },
    "v1HealthStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1InventoryEntry": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "health": {
          "$ref": "#/definitions/v1HealthStatus"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InventoryEntry"
          }
        }
      }
    },
    "v1IsCRDAvailableResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
    },
    "v1ListError": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1ListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Event"
          }
        }
      }
    },
    "v1ListFluxCrdsResponse": {
      "type": "object",
      "properties": {
        "crds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Crd"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListFluxRuntimeObjectsResponse": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Deployment"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListNamespacesResponse": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Namespace"
          }
        }
      }
    },
    "v1ListObjectsRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ListObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Object"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        },
        "searchedNamespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceList"
          }
        }
      }
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyObj"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListPolicyValidationsRequest": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        },
        "application": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "validationType": {
          "type": "string"
        }
      }
    },
    "v1ListPolicyValidationsResponse": {
      "type": "object",
      "properties": {
        "violations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyValidation"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListRuntimeCrdsResponse": {
      "type": "object",
      "properties": {
        "crds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Crd"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListRuntimeObjectsResponse": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Deployment"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1LogEntry": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "sortingKey": {
          "type": "string"
        }
      }
    },
    "v1Namespace": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1Object": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "inventory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GroupVersionKind"
          }
        },
        "info": {
          "type": "string"
        },
        "health": {
          "$ref": "#/definitions/v1HealthStatus"
        }
      }
    },
    "v1ObjectRef": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "v1PolicyObj": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "howToSolve": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "severity": {
          "type": "string"
        },
        "standards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyStandard"
          }
        },
        "gitCommit": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyParam"
          }
        },
        "targets": {
          "$ref": "#/definitions/v1PolicyTargets"
        },
        "createdAt": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "modes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny",
          "title": "value is a generic value that can be a string, int, bool and array of\nstrings"
        },
        "required": {
          "type": "boolean"
        }
      }
    },
    "v1PolicyStandard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyTargetLabel": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyTargets": {
      "type": "object",
      "properties": {
        "kinds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyTargetLabel"
          }
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyValidation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "entity": {
          "type": "string"
        },
        "entityKind": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "violatingEntity": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "howToSolve": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyValidationOccurrence"
          }
        },
        "policyId": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyValidationParam"
          }
        }
      }
    },
    "v1PolicyValidationOccurrence": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1PolicyValidationParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        },
        "required": {
          "type": "boolean"
        },
        "configRef": {
          "type": "string"
        }
      }
    },
    "v1SyncFluxObjectRequest": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectRef"
          }
        },
        "withSource": {
          "type": "boolean"
        }
      }
    },
    "v1SyncFluxObjectResponse": {
      "type": "object"
    },
    "v1ToggleSuspendResourceRequest": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectRef"
          }
        },
        "suspend": {
          "type": "boolean"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "v1ToggleSuspendResourceResponse": {
      "type": "object"
    }
  }
}

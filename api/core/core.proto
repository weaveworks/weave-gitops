/**
 * This file holds the protobuf definitions for the Weave GitOps gRPC API.
 * Messages and enums are defined in types.proto.
 */
syntax = "proto3";

package gitops_core.v1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "api/core/types.proto";

option go_package = "github.com/weaveworks/weave-gitops/core/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Weave GitOps Core API",
      version: "0.1";
      description: "The API handles operations for Weave GitOps Core";
    };
    consumes: "application/json";
    produces: "application/json";
};

/**
 * Weave GitOps Core API service definition
 */
service Core {
    /*
     * GetObject gets data about a single primary object from a cluster.
     */
    rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {
        option (google.api.http) = {
            get: "/v1/object/{name}"
        };
    }

    /*
     * ListObjects gets data about primary objects.
     */
    rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse) {
        option (google.api.http) = {
            post: "/v1/objects"
            body: "*"
        };
    }

    // Misc
    /*
     * ListFluxRuntimeObjects lists the flux runtime deployments from a cluster.
     */
    rpc ListFluxRuntimeObjects(ListFluxRuntimeObjectsRequest)
        returns (ListFluxRuntimeObjectsResponse) {
        option (google.api.http) = {
            get: "/v1/flux_runtime_objects"
        };
    }

    rpc ListFluxCrds(ListFluxCrdsRequest) returns (ListFluxCrdsResponse) {
        option (google.api.http) = {
            get: "/v1/flux_crds"
        };
    }

    /*
    * ListRuntimeObjects lists Weave GitOps runtime components.
    * Weave GitOps runtime is composed of Flux runtime but also other components
    * in the ecosystem like TF-controller or Policy Agent.
    */
    rpc ListRuntimeObjects(ListRuntimeObjectsRequest)
        returns (ListRuntimeObjectsResponse) {
        option (google.api.http) = {
            get: "/v1/runtime_objects"
        };
    }

    /*
    * ListRuntimeCrds lists Weave GitOps runtime components CRDs.
    * Weave GitOps runtime is composed of Flux runtime but also other components
    * in the ecosystem like TF-controller or Policy Agent.
    */
    rpc ListRuntimeCrds(ListRuntimeCrdsRequest)
        returns (ListRuntimeCrdsResponse) {
        option (google.api.http) = {
            get: "/v1/runtime_crds"
        };
    }

    /*
     * GetReconciledObjects returns a list of objects that were created
     * as a result of reconciling a Flux automation.
     * This list is derived by looking at the Kustomization or HelmRelease
     * specified in the request body.
     */
    rpc GetReconciledObjects(GetReconciledObjectsRequest)
        returns (GetReconciledObjectsResponse) {
        option (google.api.http) = {
            post: "/v1/reconciled_objects"
            body: "*"
        };
    };

    /*
     * GetChildObjects returns the children of a given object,
     * specified by a GroupVersionKind.
     * Not all Kubernets objects have children. For example, a Deployment
     * has a child ReplicaSet, but a Service has no child objects.
     */
    rpc GetChildObjects(GetChildObjectsRequest)
        returns (GetChildObjectsResponse) {
        option (google.api.http) = {
            post: "/v1/child_objects"
            body: "*"
        };
    };

    /*
     * GetFluxNamespace returns with a namespace with a specific label.
     */
    rpc GetFluxNamespace(GetFluxNamespaceRequest)
        returns (GetFluxNamespaceResponse) {
        option (google.api.http) = {
            post: "/v1/namespace/flux"
            body: "*"
        };
    }

    /*
     * ListNamespaces returns with the list of available namespaces.
     */
    rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
        option (google.api.http) = {
            get: "/v1/namespaces"
        };
    }
    /*
     * ListEvents returns with a list of events
     */
    rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
        option (google.api.http) = {
            get: "/v1/events"
        };
    }

    /*
     * SyncResource forces a reconciliation of a Flux resource
     */
    rpc SyncFluxObject(SyncFluxObjectRequest) returns (SyncFluxObjectResponse) {
        option (google.api.http) = {
            post: "/v1/sync"
            body: "*"
        };
    }

    /*
     * GetVersion returns version information about the server
     */
    rpc GetVersion(GetVersionRequest) returns (GetVersionResponse){
        option (google.api.http) = {
            get: "/v1/version"
        };
    }

    /*
    * GetFeatureFlags returns configuration information about the server
    */
    rpc GetFeatureFlags(GetFeatureFlagsRequest)
        returns (GetFeatureFlagsResponse) {
        option (google.api.http) = {
            get: "/v1/featureflags"
        };
    }

    /*
     * ToggleSuspendResource suspends or resumes a flux object.
     */
    rpc ToggleSuspendResource(ToggleSuspendResourceRequest)
        returns (ToggleSuspendResourceResponse) {
        option (google.api.http) = {
            post: "/v1/suspend"
            body: "*"
        };
    }

    /*
     * GetSessionLogs returns the logs for a given session
     */
    rpc GetSessionLogs(GetSessionLogsRequest) returns (GetSessionLogsResponse) {
        option (google.api.http) = {
            post: "/v1/session_logs"
            body: "*"
        };
    }

    /*
     * IsCRDAvailable returns with a hashmap where the keys are the names of
     * the clusters, and the value is a boolean indicating whether given CRD is
     * installed or not on that cluster.
     */
    rpc IsCRDAvailable(IsCRDAvailableRequest) returns (IsCRDAvailableResponse) {
        option (google.api.http) = {
            get : "/v1/crd/is_available",
        };
    }

    rpc GetInventory(GetInventoryRequest) returns (GetInventoryResponse) {
        option (google.api.http) = {
            get : "/v1/inventory",
        };
    }

    // ListPolicies list policies available on the cluster
    rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse) {
        option (google.api.http) = {
        get : "/v1/policies"
        };
    }

    // GetPolicy gets a policy by name
    rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse) {
        option (google.api.http) = {
        get : "/v1/policies/{policyName}"
        };
    }
    /*
    * ListPolicyValidations lists policy validations
    */
    rpc ListPolicyValidations(ListPolicyValidationsRequest)
        returns (ListPolicyValidationsResponse) {
        option (google.api.http) = {
        post : "/v1/policyvalidations"
        body : "*"
        };
    }

    /*
    * GetPolicyValidation gets a policy validation by id
    */
    rpc GetPolicyValidation(GetPolicyValidationRequest)
        returns (GetPolicyValidationResponse) {
        option (google.api.http) = {
        get : "/v1/policyvalidations/{validationId}"
        };
    }
}

message GetInventoryRequest {
    string kind         = 1;
    string name         = 2;
    string namespace    = 3;
    string clusterName  = 4;
    bool   withChildren = 5;
}

message GetInventoryResponse {
    repeated InventoryEntry entries = 1;
}

message PolicyValidation {
    string   id                                     = 1;
    string   message                                = 2;
    string   clusterId                              = 3;
    string   category                               = 4;
    string   severity                               = 5;
    string   createdAt                              = 6;
    string   entity                                 = 7;
    string   entityKind                             = 8;
    string   namespace                              = 9;
    string   violatingEntity                        = 10;
    string   description                            = 11;
    string   howToSolve                             = 12;
    string   name                                   = 13;
    string   clusterName                            = 14;
    repeated PolicyValidationOccurrence occurrences = 15;
    string   policyId                               = 16;
    repeated PolicyValidationParam parameters       = 17;
}

message ListPolicyValidationsRequest {
    string clusterName = 1;
    Pagination pagination = 2;
    string application = 3;
    string namespace = 4;
    string kind = 5;
    string policyId = 6;
    string validationType = 7;
}

message ListPolicyValidationsResponse {
    repeated PolicyValidation violations = 1;
    int32    total                       = 2;
    string   nextPageToken               = 3;
    repeated ListError errors            = 4;
}

message GetPolicyValidationRequest {
    string validationId = 1;
    string clusterName = 2;
    string validationType = 3;
}

message GetPolicyValidationResponse {
    PolicyValidation validation = 1;
}

message PolicyValidationOccurrence {
    string message = 1;
}

message PolicyValidationParam {
    string              name      = 1;
    string              type      = 2;
    google.protobuf.Any value     = 3;
    bool                required  = 4;
    string              configRef = 5;
}

message PolicyParamRepeatedString {
    repeated string value = 1;
}

message Pagination {
    int32  pageSize  = 1;
    string pageToken = 2;
}

message ListError {
    string clusterName = 1;
    string namespace   = 2;
    string message     = 3;
}

message ListFluxRuntimeObjectsRequest {
    string namespace   = 1;
    string clusterName = 2;
}

message ListFluxRuntimeObjectsResponse {
    repeated Deployment deployments = 1;
    repeated ListError errors       = 2;
}

message ListRuntimeObjectsRequest {
    string namespace   = 1;
    string clusterName = 2;
}

message ListRuntimeObjectsResponse {
    repeated Deployment deployments = 1;
    repeated ListError errors       = 2;
}

message ListFluxCrdsRequest {
    string clusterName = 1;
}

message ListFluxCrdsResponse {
    repeated Crd crds         = 1;
    repeated ListError errors = 2;
}

message ListRuntimeCrdsRequest {
    string clusterName = 1;
}

message ListRuntimeCrdsResponse {
    repeated Crd crds         = 1;
    repeated ListError errors = 2;
}

message GetObjectRequest {
    string name        = 1;
    string namespace   = 2;
    string kind        = 3;
    string clusterName = 4;
}

message GetObjectResponse {
    Object object = 1;
}

message ListObjectsRequest {
    string     namespace       = 1;
    string     kind            = 2;
    string     clusterName     = 3;
    map<string, string> labels = 4;
}

message ClusterNamespaceList { 
    string clusterName = 1;
    repeated string namespaces = 2; 
}

message ListObjectsResponse {
    repeated Object objects   = 1;
    repeated ListError errors = 2;
    repeated ClusterNamespaceList searchedNamespaces = 3;
}

message GetReconciledObjectsRequest {
    string   automationName         = 1;
    string   namespace              = 2;
    string   automationKind         = 3;
    repeated GroupVersionKind kinds = 4;
    string   clusterName            = 5;
}

message GetReconciledObjectsResponse {
    repeated Object objects = 1;
}

message GetChildObjectsRequest {
    GroupVersionKind groupVersionKind = 1;
    string           namespace        = 2;
    string           parentUid        = 3;
    string           clusterName      = 4;
}

message GetChildObjectsResponse {
    repeated Object objects = 1;
}

message GetFluxNamespaceRequest {}

message GetFluxNamespaceResponse {
  string name = 1;
}

message ListNamespacesRequest {}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message ListEventsRequest {
    ObjectRef involvedObject = 1;
}

message ListEventsResponse {
    repeated Event events = 1;
}

message SyncFluxObjectRequest {
    repeated ObjectRef objects = 1;
    bool     withSource        = 2;
}

message SyncFluxObjectResponse {
}

message GetVersionRequest {}

message GetVersionResponse {
    string semver      = 1;
    string commit      = 2;
    string branch      = 3;
    string buildTime   = 4;
    string kubeVersion = 5;
}

message GetFeatureFlagsRequest {}

message GetFeatureFlagsResponse {
    map<string, string> flags = 1;
}

message ToggleSuspendResourceRequest {
    repeated ObjectRef objects = 1;
    bool     suspend           = 2;
    string   comment           = 3;
}

message ToggleSuspendResourceResponse {
}

message GetSessionLogsRequest {
    string sessionNamespace = 1;
    string sessionId        = 2;
    string token            = 3;
    string logSourceFilter  = 4;
    string logLevelFilter   = 5;
}

message LogEntry {
    string timestamp  = 1;
    string source     = 2;
    string level      = 3;
    string message    = 4;
    string sortingKey = 5;
}

message GetSessionLogsResponse {
    repeated LogEntry logs       = 1;
    string   nextToken           = 2;
    string   error               = 3;
    repeated string   logSources = 4;
}

message IsCRDAvailableRequest {
    string name = 1;
}

message IsCRDAvailableResponse {
    map<string,bool> clusters = 1;
}

message ListPoliciesRequest {
    string clusterName = 1;
    Pagination pagination = 2;
}

message ListPoliciesResponse {
    repeated PolicyObj policies = 1;
    int32 total = 2;
    string nextPageToken = 3;
    repeated ListError errors = 4;
}

message GetPolicyRequest {
    string policyName = 1;
    string clusterName = 2;
}

message GetPolicyResponse {
    PolicyObj policy = 1;
    string clusterName = 2;
}

message PolicyObj {
    string name = 1;
    string id = 2;
    string code = 3;
    string description = 4;
    string howToSolve = 5;
    string category = 6;
    repeated string tags = 7;
    string severity = 8;
    repeated PolicyStandard standards = 9;
    string gitCommit = 10;
    repeated PolicyParam parameters = 11;
    PolicyTargets targets = 12;
    string createdAt = 13;
    string clusterName = 14;
    string tenant = 15;
    repeated string modes = 16;
}

message PolicyStandard {
    string id = 1;
    repeated string controls = 2;
}

message PolicyParam {
    string name = 1;
    string type = 2;
    // value is a generic value that can be a string, int, bool and array of
    // strings
    google.protobuf.Any value = 3;
    bool required = 4;
}

message PolicyTargets {
    repeated string kinds = 1;
    repeated PolicyTargetLabel labels = 2;
    repeated string namespaces = 3;
}

message PolicyTargetLabel { map<string, string> values = 1; }

// Code generated by counterfeiter. DO NOT EDIT.
package fluxfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/flux"
	"github.com/weaveworks/weave-gitops/pkg/gitproviders"
)

type FakeFlux struct {
	CreateSecretGitStub        func(string, gitproviders.RepoURL, string) ([]byte, error)
	createSecretGitMutex       sync.RWMutex
	createSecretGitArgsForCall []struct {
		arg1 string
		arg2 gitproviders.RepoURL
		arg3 string
	}
	createSecretGitReturns struct {
		result1 []byte
		result2 error
	}
	createSecretGitReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlux) CreateSecretGit(arg1 string, arg2 gitproviders.RepoURL, arg3 string) ([]byte, error) {
	fake.createSecretGitMutex.Lock()
	ret, specificReturn := fake.createSecretGitReturnsOnCall[len(fake.createSecretGitArgsForCall)]
	fake.createSecretGitArgsForCall = append(fake.createSecretGitArgsForCall, struct {
		arg1 string
		arg2 gitproviders.RepoURL
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CreateSecretGitStub
	fakeReturns := fake.createSecretGitReturns
	fake.recordInvocation("CreateSecretGit", []interface{}{arg1, arg2, arg3})
	fake.createSecretGitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFlux) CreateSecretGitCallCount() int {
	fake.createSecretGitMutex.RLock()
	defer fake.createSecretGitMutex.RUnlock()
	return len(fake.createSecretGitArgsForCall)
}

func (fake *FakeFlux) CreateSecretGitCalls(stub func(string, gitproviders.RepoURL, string) ([]byte, error)) {
	fake.createSecretGitMutex.Lock()
	defer fake.createSecretGitMutex.Unlock()
	fake.CreateSecretGitStub = stub
}

func (fake *FakeFlux) CreateSecretGitArgsForCall(i int) (string, gitproviders.RepoURL, string) {
	fake.createSecretGitMutex.RLock()
	defer fake.createSecretGitMutex.RUnlock()
	argsForCall := fake.createSecretGitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFlux) CreateSecretGitReturns(result1 []byte, result2 error) {
	fake.createSecretGitMutex.Lock()
	defer fake.createSecretGitMutex.Unlock()
	fake.CreateSecretGitStub = nil
	fake.createSecretGitReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlux) CreateSecretGitReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.createSecretGitMutex.Lock()
	defer fake.createSecretGitMutex.Unlock()
	fake.CreateSecretGitStub = nil
	if fake.createSecretGitReturnsOnCall == nil {
		fake.createSecretGitReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.createSecretGitReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFlux) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlux) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ flux.Flux = new(FakeFlux)

// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"context"
	"net/http"
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/services/auth/types"
)

type FakeAuthFlow struct {
	AuthorizeStub        func(context.Context) (*http.Request, error)
	authorizeMutex       sync.RWMutex
	authorizeArgsForCall []struct {
		arg1 context.Context
	}
	authorizeReturns struct {
		result1 *http.Request
		result2 error
	}
	authorizeReturnsOnCall map[int]struct {
		result1 *http.Request
		result2 error
	}
	CallbackHandlerStub        func(*types.TokenResponseState, http.Handler) http.Handler
	callbackHandlerMutex       sync.RWMutex
	callbackHandlerArgsForCall []struct {
		arg1 *types.TokenResponseState
		arg2 http.Handler
	}
	callbackHandlerReturns struct {
		result1 http.Handler
	}
	callbackHandlerReturnsOnCall map[int]struct {
		result1 http.Handler
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthFlow) Authorize(arg1 context.Context) (*http.Request, error) {
	fake.authorizeMutex.Lock()
	ret, specificReturn := fake.authorizeReturnsOnCall[len(fake.authorizeArgsForCall)]
	fake.authorizeArgsForCall = append(fake.authorizeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.AuthorizeStub
	fakeReturns := fake.authorizeReturns
	fake.recordInvocation("Authorize", []interface{}{arg1})
	fake.authorizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthFlow) AuthorizeCallCount() int {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	return len(fake.authorizeArgsForCall)
}

func (fake *FakeAuthFlow) AuthorizeCalls(stub func(context.Context) (*http.Request, error)) {
	fake.authorizeMutex.Lock()
	defer fake.authorizeMutex.Unlock()
	fake.AuthorizeStub = stub
}

func (fake *FakeAuthFlow) AuthorizeArgsForCall(i int) context.Context {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	argsForCall := fake.authorizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthFlow) AuthorizeReturns(result1 *http.Request, result2 error) {
	fake.authorizeMutex.Lock()
	defer fake.authorizeMutex.Unlock()
	fake.AuthorizeStub = nil
	fake.authorizeReturns = struct {
		result1 *http.Request
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthFlow) AuthorizeReturnsOnCall(i int, result1 *http.Request, result2 error) {
	fake.authorizeMutex.Lock()
	defer fake.authorizeMutex.Unlock()
	fake.AuthorizeStub = nil
	if fake.authorizeReturnsOnCall == nil {
		fake.authorizeReturnsOnCall = make(map[int]struct {
			result1 *http.Request
			result2 error
		})
	}
	fake.authorizeReturnsOnCall[i] = struct {
		result1 *http.Request
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthFlow) CallbackHandler(arg1 *types.TokenResponseState, arg2 http.Handler) http.Handler {
	fake.callbackHandlerMutex.Lock()
	ret, specificReturn := fake.callbackHandlerReturnsOnCall[len(fake.callbackHandlerArgsForCall)]
	fake.callbackHandlerArgsForCall = append(fake.callbackHandlerArgsForCall, struct {
		arg1 *types.TokenResponseState
		arg2 http.Handler
	}{arg1, arg2})
	stub := fake.CallbackHandlerStub
	fakeReturns := fake.callbackHandlerReturns
	fake.recordInvocation("CallbackHandler", []interface{}{arg1, arg2})
	fake.callbackHandlerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthFlow) CallbackHandlerCallCount() int {
	fake.callbackHandlerMutex.RLock()
	defer fake.callbackHandlerMutex.RUnlock()
	return len(fake.callbackHandlerArgsForCall)
}

func (fake *FakeAuthFlow) CallbackHandlerCalls(stub func(*types.TokenResponseState, http.Handler) http.Handler) {
	fake.callbackHandlerMutex.Lock()
	defer fake.callbackHandlerMutex.Unlock()
	fake.CallbackHandlerStub = stub
}

func (fake *FakeAuthFlow) CallbackHandlerArgsForCall(i int) (*types.TokenResponseState, http.Handler) {
	fake.callbackHandlerMutex.RLock()
	defer fake.callbackHandlerMutex.RUnlock()
	argsForCall := fake.callbackHandlerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthFlow) CallbackHandlerReturns(result1 http.Handler) {
	fake.callbackHandlerMutex.Lock()
	defer fake.callbackHandlerMutex.Unlock()
	fake.CallbackHandlerStub = nil
	fake.callbackHandlerReturns = struct {
		result1 http.Handler
	}{result1}
}

func (fake *FakeAuthFlow) CallbackHandlerReturnsOnCall(i int, result1 http.Handler) {
	fake.callbackHandlerMutex.Lock()
	defer fake.callbackHandlerMutex.Unlock()
	fake.CallbackHandlerStub = nil
	if fake.callbackHandlerReturnsOnCall == nil {
		fake.callbackHandlerReturnsOnCall = make(map[int]struct {
			result1 http.Handler
		})
	}
	fake.callbackHandlerReturnsOnCall[i] = struct {
		result1 http.Handler
	}{result1}
}

func (fake *FakeAuthFlow) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthFlow) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.AuthFlow = new(FakeAuthFlow)

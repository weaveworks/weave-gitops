// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"context"
	"net/url"
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/services/auth"
	"github.com/weaveworks/weave-gitops/pkg/services/auth/types"
)

type FakeGitlabAuthClient struct {
	AuthURLStub        func(context.Context, string) (url.URL, error)
	authURLMutex       sync.RWMutex
	authURLArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	authURLReturns struct {
		result1 url.URL
		result2 error
	}
	authURLReturnsOnCall map[int]struct {
		result1 url.URL
		result2 error
	}
	ExchangeCodeStub        func(context.Context, string, string) (*types.TokenResponseState, error)
	exchangeCodeMutex       sync.RWMutex
	exchangeCodeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	exchangeCodeReturns struct {
		result1 *types.TokenResponseState
		result2 error
	}
	exchangeCodeReturnsOnCall map[int]struct {
		result1 *types.TokenResponseState
		result2 error
	}
	ValidateTokenStub        func(context.Context, string) error
	validateTokenMutex       sync.RWMutex
	validateTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	validateTokenReturns struct {
		result1 error
	}
	validateTokenReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitlabAuthClient) AuthURL(arg1 context.Context, arg2 string) (url.URL, error) {
	fake.authURLMutex.Lock()
	ret, specificReturn := fake.authURLReturnsOnCall[len(fake.authURLArgsForCall)]
	fake.authURLArgsForCall = append(fake.authURLArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.AuthURLStub
	fakeReturns := fake.authURLReturns
	fake.recordInvocation("AuthURL", []interface{}{arg1, arg2})
	fake.authURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitlabAuthClient) AuthURLCallCount() int {
	fake.authURLMutex.RLock()
	defer fake.authURLMutex.RUnlock()
	return len(fake.authURLArgsForCall)
}

func (fake *FakeGitlabAuthClient) AuthURLCalls(stub func(context.Context, string) (url.URL, error)) {
	fake.authURLMutex.Lock()
	defer fake.authURLMutex.Unlock()
	fake.AuthURLStub = stub
}

func (fake *FakeGitlabAuthClient) AuthURLArgsForCall(i int) (context.Context, string) {
	fake.authURLMutex.RLock()
	defer fake.authURLMutex.RUnlock()
	argsForCall := fake.authURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGitlabAuthClient) AuthURLReturns(result1 url.URL, result2 error) {
	fake.authURLMutex.Lock()
	defer fake.authURLMutex.Unlock()
	fake.AuthURLStub = nil
	fake.authURLReturns = struct {
		result1 url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeGitlabAuthClient) AuthURLReturnsOnCall(i int, result1 url.URL, result2 error) {
	fake.authURLMutex.Lock()
	defer fake.authURLMutex.Unlock()
	fake.AuthURLStub = nil
	if fake.authURLReturnsOnCall == nil {
		fake.authURLReturnsOnCall = make(map[int]struct {
			result1 url.URL
			result2 error
		})
	}
	fake.authURLReturnsOnCall[i] = struct {
		result1 url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeGitlabAuthClient) ExchangeCode(arg1 context.Context, arg2 string, arg3 string) (*types.TokenResponseState, error) {
	fake.exchangeCodeMutex.Lock()
	ret, specificReturn := fake.exchangeCodeReturnsOnCall[len(fake.exchangeCodeArgsForCall)]
	fake.exchangeCodeArgsForCall = append(fake.exchangeCodeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ExchangeCodeStub
	fakeReturns := fake.exchangeCodeReturns
	fake.recordInvocation("ExchangeCode", []interface{}{arg1, arg2, arg3})
	fake.exchangeCodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitlabAuthClient) ExchangeCodeCallCount() int {
	fake.exchangeCodeMutex.RLock()
	defer fake.exchangeCodeMutex.RUnlock()
	return len(fake.exchangeCodeArgsForCall)
}

func (fake *FakeGitlabAuthClient) ExchangeCodeCalls(stub func(context.Context, string, string) (*types.TokenResponseState, error)) {
	fake.exchangeCodeMutex.Lock()
	defer fake.exchangeCodeMutex.Unlock()
	fake.ExchangeCodeStub = stub
}

func (fake *FakeGitlabAuthClient) ExchangeCodeArgsForCall(i int) (context.Context, string, string) {
	fake.exchangeCodeMutex.RLock()
	defer fake.exchangeCodeMutex.RUnlock()
	argsForCall := fake.exchangeCodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGitlabAuthClient) ExchangeCodeReturns(result1 *types.TokenResponseState, result2 error) {
	fake.exchangeCodeMutex.Lock()
	defer fake.exchangeCodeMutex.Unlock()
	fake.ExchangeCodeStub = nil
	fake.exchangeCodeReturns = struct {
		result1 *types.TokenResponseState
		result2 error
	}{result1, result2}
}

func (fake *FakeGitlabAuthClient) ExchangeCodeReturnsOnCall(i int, result1 *types.TokenResponseState, result2 error) {
	fake.exchangeCodeMutex.Lock()
	defer fake.exchangeCodeMutex.Unlock()
	fake.ExchangeCodeStub = nil
	if fake.exchangeCodeReturnsOnCall == nil {
		fake.exchangeCodeReturnsOnCall = make(map[int]struct {
			result1 *types.TokenResponseState
			result2 error
		})
	}
	fake.exchangeCodeReturnsOnCall[i] = struct {
		result1 *types.TokenResponseState
		result2 error
	}{result1, result2}
}

func (fake *FakeGitlabAuthClient) ValidateToken(arg1 context.Context, arg2 string) error {
	fake.validateTokenMutex.Lock()
	ret, specificReturn := fake.validateTokenReturnsOnCall[len(fake.validateTokenArgsForCall)]
	fake.validateTokenArgsForCall = append(fake.validateTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ValidateTokenStub
	fakeReturns := fake.validateTokenReturns
	fake.recordInvocation("ValidateToken", []interface{}{arg1, arg2})
	fake.validateTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitlabAuthClient) ValidateTokenCallCount() int {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	return len(fake.validateTokenArgsForCall)
}

func (fake *FakeGitlabAuthClient) ValidateTokenCalls(stub func(context.Context, string) error) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = stub
}

func (fake *FakeGitlabAuthClient) ValidateTokenArgsForCall(i int) (context.Context, string) {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	argsForCall := fake.validateTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGitlabAuthClient) ValidateTokenReturns(result1 error) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = nil
	fake.validateTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitlabAuthClient) ValidateTokenReturnsOnCall(i int, result1 error) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = nil
	if fake.validateTokenReturnsOnCall == nil {
		fake.validateTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitlabAuthClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitlabAuthClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.GitlabAuthClient = new(FakeGitlabAuthClient)

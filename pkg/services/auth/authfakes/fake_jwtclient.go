// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"sync"
	"time"

	"github.com/weaveworks/weave-gitops/pkg/gitproviders"
	"github.com/weaveworks/weave-gitops/pkg/services/auth"
)

type FakeJWTClient struct {
	GenerateJWTStub        func(time.Duration, gitproviders.GitProviderName, string) (string, error)
	generateJWTMutex       sync.RWMutex
	generateJWTArgsForCall []struct {
		arg1 time.Duration
		arg2 gitproviders.GitProviderName
		arg3 string
	}
	generateJWTReturns struct {
		result1 string
		result2 error
	}
	generateJWTReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	VerifyJWTStub        func(string) (*auth.Claims, error)
	verifyJWTMutex       sync.RWMutex
	verifyJWTArgsForCall []struct {
		arg1 string
	}
	verifyJWTReturns struct {
		result1 *auth.Claims
		result2 error
	}
	verifyJWTReturnsOnCall map[int]struct {
		result1 *auth.Claims
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJWTClient) GenerateJWT(arg1 time.Duration, arg2 gitproviders.GitProviderName, arg3 string) (string, error) {
	fake.generateJWTMutex.Lock()
	ret, specificReturn := fake.generateJWTReturnsOnCall[len(fake.generateJWTArgsForCall)]
	fake.generateJWTArgsForCall = append(fake.generateJWTArgsForCall, struct {
		arg1 time.Duration
		arg2 gitproviders.GitProviderName
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GenerateJWTStub
	fakeReturns := fake.generateJWTReturns
	fake.recordInvocation("GenerateJWT", []interface{}{arg1, arg2, arg3})
	fake.generateJWTMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJWTClient) GenerateJWTCallCount() int {
	fake.generateJWTMutex.RLock()
	defer fake.generateJWTMutex.RUnlock()
	return len(fake.generateJWTArgsForCall)
}

func (fake *FakeJWTClient) GenerateJWTCalls(stub func(time.Duration, gitproviders.GitProviderName, string) (string, error)) {
	fake.generateJWTMutex.Lock()
	defer fake.generateJWTMutex.Unlock()
	fake.GenerateJWTStub = stub
}

func (fake *FakeJWTClient) GenerateJWTArgsForCall(i int) (time.Duration, gitproviders.GitProviderName, string) {
	fake.generateJWTMutex.RLock()
	defer fake.generateJWTMutex.RUnlock()
	argsForCall := fake.generateJWTArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeJWTClient) GenerateJWTReturns(result1 string, result2 error) {
	fake.generateJWTMutex.Lock()
	defer fake.generateJWTMutex.Unlock()
	fake.GenerateJWTStub = nil
	fake.generateJWTReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) GenerateJWTReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateJWTMutex.Lock()
	defer fake.generateJWTMutex.Unlock()
	fake.GenerateJWTStub = nil
	if fake.generateJWTReturnsOnCall == nil {
		fake.generateJWTReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateJWTReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) VerifyJWT(arg1 string) (*auth.Claims, error) {
	fake.verifyJWTMutex.Lock()
	ret, specificReturn := fake.verifyJWTReturnsOnCall[len(fake.verifyJWTArgsForCall)]
	fake.verifyJWTArgsForCall = append(fake.verifyJWTArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.VerifyJWTStub
	fakeReturns := fake.verifyJWTReturns
	fake.recordInvocation("VerifyJWT", []interface{}{arg1})
	fake.verifyJWTMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJWTClient) VerifyJWTCallCount() int {
	fake.verifyJWTMutex.RLock()
	defer fake.verifyJWTMutex.RUnlock()
	return len(fake.verifyJWTArgsForCall)
}

func (fake *FakeJWTClient) VerifyJWTCalls(stub func(string) (*auth.Claims, error)) {
	fake.verifyJWTMutex.Lock()
	defer fake.verifyJWTMutex.Unlock()
	fake.VerifyJWTStub = stub
}

func (fake *FakeJWTClient) VerifyJWTArgsForCall(i int) string {
	fake.verifyJWTMutex.RLock()
	defer fake.verifyJWTMutex.RUnlock()
	argsForCall := fake.verifyJWTArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJWTClient) VerifyJWTReturns(result1 *auth.Claims, result2 error) {
	fake.verifyJWTMutex.Lock()
	defer fake.verifyJWTMutex.Unlock()
	fake.VerifyJWTStub = nil
	fake.verifyJWTReturns = struct {
		result1 *auth.Claims
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) VerifyJWTReturnsOnCall(i int, result1 *auth.Claims, result2 error) {
	fake.verifyJWTMutex.Lock()
	defer fake.verifyJWTMutex.Unlock()
	fake.VerifyJWTStub = nil
	if fake.verifyJWTReturnsOnCall == nil {
		fake.verifyJWTReturnsOnCall = make(map[int]struct {
			result1 *auth.Claims
			result2 error
		})
	}
	fake.verifyJWTReturnsOnCall[i] = struct {
		result1 *auth.Claims
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJWTClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.JWTClient = new(FakeJWTClient)

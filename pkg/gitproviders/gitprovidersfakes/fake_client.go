// Code generated by counterfeiter. DO NOT EDIT.
package gitprovidersfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/gitproviders"
)

type FakeClient struct {
	GetProviderStub        func(gitproviders.RepoURL, gitproviders.AccountTypeGetter) (gitproviders.GitProvider, error)
	getProviderMutex       sync.RWMutex
	getProviderArgsForCall []struct {
		arg1 gitproviders.RepoURL
		arg2 gitproviders.AccountTypeGetter
	}
	getProviderReturns struct {
		result1 gitproviders.GitProvider
		result2 error
	}
	getProviderReturnsOnCall map[int]struct {
		result1 gitproviders.GitProvider
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetProvider(arg1 gitproviders.RepoURL, arg2 gitproviders.AccountTypeGetter) (gitproviders.GitProvider, error) {
	fake.getProviderMutex.Lock()
	ret, specificReturn := fake.getProviderReturnsOnCall[len(fake.getProviderArgsForCall)]
	fake.getProviderArgsForCall = append(fake.getProviderArgsForCall, struct {
		arg1 gitproviders.RepoURL
		arg2 gitproviders.AccountTypeGetter
	}{arg1, arg2})
	stub := fake.GetProviderStub
	fakeReturns := fake.getProviderReturns
	fake.recordInvocation("GetProvider", []interface{}{arg1, arg2})
	fake.getProviderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetProviderCallCount() int {
	fake.getProviderMutex.RLock()
	defer fake.getProviderMutex.RUnlock()
	return len(fake.getProviderArgsForCall)
}

func (fake *FakeClient) GetProviderCalls(stub func(gitproviders.RepoURL, gitproviders.AccountTypeGetter) (gitproviders.GitProvider, error)) {
	fake.getProviderMutex.Lock()
	defer fake.getProviderMutex.Unlock()
	fake.GetProviderStub = stub
}

func (fake *FakeClient) GetProviderArgsForCall(i int) (gitproviders.RepoURL, gitproviders.AccountTypeGetter) {
	fake.getProviderMutex.RLock()
	defer fake.getProviderMutex.RUnlock()
	argsForCall := fake.getProviderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetProviderReturns(result1 gitproviders.GitProvider, result2 error) {
	fake.getProviderMutex.Lock()
	defer fake.getProviderMutex.Unlock()
	fake.GetProviderStub = nil
	fake.getProviderReturns = struct {
		result1 gitproviders.GitProvider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetProviderReturnsOnCall(i int, result1 gitproviders.GitProvider, result2 error) {
	fake.getProviderMutex.Lock()
	defer fake.getProviderMutex.Unlock()
	fake.GetProviderStub = nil
	if fake.getProviderReturnsOnCall == nil {
		fake.getProviderReturnsOnCall = make(map[int]struct {
			result1 gitproviders.GitProvider
			result2 error
		})
	}
	fake.getProviderReturnsOnCall[i] = struct {
		result1 gitproviders.GitProvider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitproviders.Client = new(FakeClient)

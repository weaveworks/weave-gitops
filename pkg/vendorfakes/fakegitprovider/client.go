// Code generated by counterfeiter. DO NOT EDIT.
package fakegitprovider

import (
	"context"
	"sync"

	"github.com/fluxcd/go-git-providers/gitprovider"
)

type Client struct {
	HasTokenPermissionStub        func(context.Context, gitprovider.TokenPermission) (bool, error)
	hasTokenPermissionMutex       sync.RWMutex
	hasTokenPermissionArgsForCall []struct {
		arg1 context.Context
		arg2 gitprovider.TokenPermission
	}
	hasTokenPermissionReturns struct {
		result1 bool
		result2 error
	}
	hasTokenPermissionReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	OrgRepositoriesStub        func() gitprovider.OrgRepositoriesClient
	orgRepositoriesMutex       sync.RWMutex
	orgRepositoriesArgsForCall []struct {
	}
	orgRepositoriesReturns struct {
		result1 gitprovider.OrgRepositoriesClient
	}
	orgRepositoriesReturnsOnCall map[int]struct {
		result1 gitprovider.OrgRepositoriesClient
	}
	OrganizationsStub        func() gitprovider.OrganizationsClient
	organizationsMutex       sync.RWMutex
	organizationsArgsForCall []struct {
	}
	organizationsReturns struct {
		result1 gitprovider.OrganizationsClient
	}
	organizationsReturnsOnCall map[int]struct {
		result1 gitprovider.OrganizationsClient
	}
	ProviderIDStub        func() gitprovider.ProviderID
	providerIDMutex       sync.RWMutex
	providerIDArgsForCall []struct {
	}
	providerIDReturns struct {
		result1 gitprovider.ProviderID
	}
	providerIDReturnsOnCall map[int]struct {
		result1 gitprovider.ProviderID
	}
	RawStub        func() interface{}
	rawMutex       sync.RWMutex
	rawArgsForCall []struct {
	}
	rawReturns struct {
		result1 interface{}
	}
	rawReturnsOnCall map[int]struct {
		result1 interface{}
	}
	SupportedDomainStub        func() string
	supportedDomainMutex       sync.RWMutex
	supportedDomainArgsForCall []struct {
	}
	supportedDomainReturns struct {
		result1 string
	}
	supportedDomainReturnsOnCall map[int]struct {
		result1 string
	}
	UserRepositoriesStub        func() gitprovider.UserRepositoriesClient
	userRepositoriesMutex       sync.RWMutex
	userRepositoriesArgsForCall []struct {
	}
	userRepositoriesReturns struct {
		result1 gitprovider.UserRepositoriesClient
	}
	userRepositoriesReturnsOnCall map[int]struct {
		result1 gitprovider.UserRepositoriesClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Client) HasTokenPermission(arg1 context.Context, arg2 gitprovider.TokenPermission) (bool, error) {
	fake.hasTokenPermissionMutex.Lock()
	ret, specificReturn := fake.hasTokenPermissionReturnsOnCall[len(fake.hasTokenPermissionArgsForCall)]
	fake.hasTokenPermissionArgsForCall = append(fake.hasTokenPermissionArgsForCall, struct {
		arg1 context.Context
		arg2 gitprovider.TokenPermission
	}{arg1, arg2})
	stub := fake.HasTokenPermissionStub
	fakeReturns := fake.hasTokenPermissionReturns
	fake.recordInvocation("HasTokenPermission", []interface{}{arg1, arg2})
	fake.hasTokenPermissionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Client) HasTokenPermissionCallCount() int {
	fake.hasTokenPermissionMutex.RLock()
	defer fake.hasTokenPermissionMutex.RUnlock()
	return len(fake.hasTokenPermissionArgsForCall)
}

func (fake *Client) HasTokenPermissionCalls(stub func(context.Context, gitprovider.TokenPermission) (bool, error)) {
	fake.hasTokenPermissionMutex.Lock()
	defer fake.hasTokenPermissionMutex.Unlock()
	fake.HasTokenPermissionStub = stub
}

func (fake *Client) HasTokenPermissionArgsForCall(i int) (context.Context, gitprovider.TokenPermission) {
	fake.hasTokenPermissionMutex.RLock()
	defer fake.hasTokenPermissionMutex.RUnlock()
	argsForCall := fake.hasTokenPermissionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Client) HasTokenPermissionReturns(result1 bool, result2 error) {
	fake.hasTokenPermissionMutex.Lock()
	defer fake.hasTokenPermissionMutex.Unlock()
	fake.HasTokenPermissionStub = nil
	fake.hasTokenPermissionReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Client) HasTokenPermissionReturnsOnCall(i int, result1 bool, result2 error) {
	fake.hasTokenPermissionMutex.Lock()
	defer fake.hasTokenPermissionMutex.Unlock()
	fake.HasTokenPermissionStub = nil
	if fake.hasTokenPermissionReturnsOnCall == nil {
		fake.hasTokenPermissionReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasTokenPermissionReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Client) OrgRepositories() gitprovider.OrgRepositoriesClient {
	fake.orgRepositoriesMutex.Lock()
	ret, specificReturn := fake.orgRepositoriesReturnsOnCall[len(fake.orgRepositoriesArgsForCall)]
	fake.orgRepositoriesArgsForCall = append(fake.orgRepositoriesArgsForCall, struct {
	}{})
	stub := fake.OrgRepositoriesStub
	fakeReturns := fake.orgRepositoriesReturns
	fake.recordInvocation("OrgRepositories", []interface{}{})
	fake.orgRepositoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Client) OrgRepositoriesCallCount() int {
	fake.orgRepositoriesMutex.RLock()
	defer fake.orgRepositoriesMutex.RUnlock()
	return len(fake.orgRepositoriesArgsForCall)
}

func (fake *Client) OrgRepositoriesCalls(stub func() gitprovider.OrgRepositoriesClient) {
	fake.orgRepositoriesMutex.Lock()
	defer fake.orgRepositoriesMutex.Unlock()
	fake.OrgRepositoriesStub = stub
}

func (fake *Client) OrgRepositoriesReturns(result1 gitprovider.OrgRepositoriesClient) {
	fake.orgRepositoriesMutex.Lock()
	defer fake.orgRepositoriesMutex.Unlock()
	fake.OrgRepositoriesStub = nil
	fake.orgRepositoriesReturns = struct {
		result1 gitprovider.OrgRepositoriesClient
	}{result1}
}

func (fake *Client) OrgRepositoriesReturnsOnCall(i int, result1 gitprovider.OrgRepositoriesClient) {
	fake.orgRepositoriesMutex.Lock()
	defer fake.orgRepositoriesMutex.Unlock()
	fake.OrgRepositoriesStub = nil
	if fake.orgRepositoriesReturnsOnCall == nil {
		fake.orgRepositoriesReturnsOnCall = make(map[int]struct {
			result1 gitprovider.OrgRepositoriesClient
		})
	}
	fake.orgRepositoriesReturnsOnCall[i] = struct {
		result1 gitprovider.OrgRepositoriesClient
	}{result1}
}

func (fake *Client) Organizations() gitprovider.OrganizationsClient {
	fake.organizationsMutex.Lock()
	ret, specificReturn := fake.organizationsReturnsOnCall[len(fake.organizationsArgsForCall)]
	fake.organizationsArgsForCall = append(fake.organizationsArgsForCall, struct {
	}{})
	stub := fake.OrganizationsStub
	fakeReturns := fake.organizationsReturns
	fake.recordInvocation("Organizations", []interface{}{})
	fake.organizationsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Client) OrganizationsCallCount() int {
	fake.organizationsMutex.RLock()
	defer fake.organizationsMutex.RUnlock()
	return len(fake.organizationsArgsForCall)
}

func (fake *Client) OrganizationsCalls(stub func() gitprovider.OrganizationsClient) {
	fake.organizationsMutex.Lock()
	defer fake.organizationsMutex.Unlock()
	fake.OrganizationsStub = stub
}

func (fake *Client) OrganizationsReturns(result1 gitprovider.OrganizationsClient) {
	fake.organizationsMutex.Lock()
	defer fake.organizationsMutex.Unlock()
	fake.OrganizationsStub = nil
	fake.organizationsReturns = struct {
		result1 gitprovider.OrganizationsClient
	}{result1}
}

func (fake *Client) OrganizationsReturnsOnCall(i int, result1 gitprovider.OrganizationsClient) {
	fake.organizationsMutex.Lock()
	defer fake.organizationsMutex.Unlock()
	fake.OrganizationsStub = nil
	if fake.organizationsReturnsOnCall == nil {
		fake.organizationsReturnsOnCall = make(map[int]struct {
			result1 gitprovider.OrganizationsClient
		})
	}
	fake.organizationsReturnsOnCall[i] = struct {
		result1 gitprovider.OrganizationsClient
	}{result1}
}

func (fake *Client) ProviderID() gitprovider.ProviderID {
	fake.providerIDMutex.Lock()
	ret, specificReturn := fake.providerIDReturnsOnCall[len(fake.providerIDArgsForCall)]
	fake.providerIDArgsForCall = append(fake.providerIDArgsForCall, struct {
	}{})
	stub := fake.ProviderIDStub
	fakeReturns := fake.providerIDReturns
	fake.recordInvocation("ProviderID", []interface{}{})
	fake.providerIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Client) ProviderIDCallCount() int {
	fake.providerIDMutex.RLock()
	defer fake.providerIDMutex.RUnlock()
	return len(fake.providerIDArgsForCall)
}

func (fake *Client) ProviderIDCalls(stub func() gitprovider.ProviderID) {
	fake.providerIDMutex.Lock()
	defer fake.providerIDMutex.Unlock()
	fake.ProviderIDStub = stub
}

func (fake *Client) ProviderIDReturns(result1 gitprovider.ProviderID) {
	fake.providerIDMutex.Lock()
	defer fake.providerIDMutex.Unlock()
	fake.ProviderIDStub = nil
	fake.providerIDReturns = struct {
		result1 gitprovider.ProviderID
	}{result1}
}

func (fake *Client) ProviderIDReturnsOnCall(i int, result1 gitprovider.ProviderID) {
	fake.providerIDMutex.Lock()
	defer fake.providerIDMutex.Unlock()
	fake.ProviderIDStub = nil
	if fake.providerIDReturnsOnCall == nil {
		fake.providerIDReturnsOnCall = make(map[int]struct {
			result1 gitprovider.ProviderID
		})
	}
	fake.providerIDReturnsOnCall[i] = struct {
		result1 gitprovider.ProviderID
	}{result1}
}

func (fake *Client) Raw() interface{} {
	fake.rawMutex.Lock()
	ret, specificReturn := fake.rawReturnsOnCall[len(fake.rawArgsForCall)]
	fake.rawArgsForCall = append(fake.rawArgsForCall, struct {
	}{})
	stub := fake.RawStub
	fakeReturns := fake.rawReturns
	fake.recordInvocation("Raw", []interface{}{})
	fake.rawMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Client) RawCallCount() int {
	fake.rawMutex.RLock()
	defer fake.rawMutex.RUnlock()
	return len(fake.rawArgsForCall)
}

func (fake *Client) RawCalls(stub func() interface{}) {
	fake.rawMutex.Lock()
	defer fake.rawMutex.Unlock()
	fake.RawStub = stub
}

func (fake *Client) RawReturns(result1 interface{}) {
	fake.rawMutex.Lock()
	defer fake.rawMutex.Unlock()
	fake.RawStub = nil
	fake.rawReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *Client) RawReturnsOnCall(i int, result1 interface{}) {
	fake.rawMutex.Lock()
	defer fake.rawMutex.Unlock()
	fake.RawStub = nil
	if fake.rawReturnsOnCall == nil {
		fake.rawReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.rawReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *Client) SupportedDomain() string {
	fake.supportedDomainMutex.Lock()
	ret, specificReturn := fake.supportedDomainReturnsOnCall[len(fake.supportedDomainArgsForCall)]
	fake.supportedDomainArgsForCall = append(fake.supportedDomainArgsForCall, struct {
	}{})
	stub := fake.SupportedDomainStub
	fakeReturns := fake.supportedDomainReturns
	fake.recordInvocation("SupportedDomain", []interface{}{})
	fake.supportedDomainMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Client) SupportedDomainCallCount() int {
	fake.supportedDomainMutex.RLock()
	defer fake.supportedDomainMutex.RUnlock()
	return len(fake.supportedDomainArgsForCall)
}

func (fake *Client) SupportedDomainCalls(stub func() string) {
	fake.supportedDomainMutex.Lock()
	defer fake.supportedDomainMutex.Unlock()
	fake.SupportedDomainStub = stub
}

func (fake *Client) SupportedDomainReturns(result1 string) {
	fake.supportedDomainMutex.Lock()
	defer fake.supportedDomainMutex.Unlock()
	fake.SupportedDomainStub = nil
	fake.supportedDomainReturns = struct {
		result1 string
	}{result1}
}

func (fake *Client) SupportedDomainReturnsOnCall(i int, result1 string) {
	fake.supportedDomainMutex.Lock()
	defer fake.supportedDomainMutex.Unlock()
	fake.SupportedDomainStub = nil
	if fake.supportedDomainReturnsOnCall == nil {
		fake.supportedDomainReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.supportedDomainReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Client) UserRepositories() gitprovider.UserRepositoriesClient {
	fake.userRepositoriesMutex.Lock()
	ret, specificReturn := fake.userRepositoriesReturnsOnCall[len(fake.userRepositoriesArgsForCall)]
	fake.userRepositoriesArgsForCall = append(fake.userRepositoriesArgsForCall, struct {
	}{})
	stub := fake.UserRepositoriesStub
	fakeReturns := fake.userRepositoriesReturns
	fake.recordInvocation("UserRepositories", []interface{}{})
	fake.userRepositoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Client) UserRepositoriesCallCount() int {
	fake.userRepositoriesMutex.RLock()
	defer fake.userRepositoriesMutex.RUnlock()
	return len(fake.userRepositoriesArgsForCall)
}

func (fake *Client) UserRepositoriesCalls(stub func() gitprovider.UserRepositoriesClient) {
	fake.userRepositoriesMutex.Lock()
	defer fake.userRepositoriesMutex.Unlock()
	fake.UserRepositoriesStub = stub
}

func (fake *Client) UserRepositoriesReturns(result1 gitprovider.UserRepositoriesClient) {
	fake.userRepositoriesMutex.Lock()
	defer fake.userRepositoriesMutex.Unlock()
	fake.UserRepositoriesStub = nil
	fake.userRepositoriesReturns = struct {
		result1 gitprovider.UserRepositoriesClient
	}{result1}
}

func (fake *Client) UserRepositoriesReturnsOnCall(i int, result1 gitprovider.UserRepositoriesClient) {
	fake.userRepositoriesMutex.Lock()
	defer fake.userRepositoriesMutex.Unlock()
	fake.UserRepositoriesStub = nil
	if fake.userRepositoriesReturnsOnCall == nil {
		fake.userRepositoriesReturnsOnCall = make(map[int]struct {
			result1 gitprovider.UserRepositoriesClient
		})
	}
	fake.userRepositoriesReturnsOnCall[i] = struct {
		result1 gitprovider.UserRepositoriesClient
	}{result1}
}

func (fake *Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitprovider.Client = new(Client)

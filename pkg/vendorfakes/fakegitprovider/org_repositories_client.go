// Code generated by counterfeiter. DO NOT EDIT.
package fakegitprovider

import (
	"context"
	"sync"

	"github.com/fluxcd/go-git-providers/gitprovider"
)

type OrgRepositoriesClient struct {
	CreateStub        func(context.Context, gitprovider.OrgRepositoryRef, gitprovider.RepositoryInfo, ...gitprovider.RepositoryCreateOption) (gitprovider.OrgRepository, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 gitprovider.OrgRepositoryRef
		arg3 gitprovider.RepositoryInfo
		arg4 []gitprovider.RepositoryCreateOption
	}
	createReturns struct {
		result1 gitprovider.OrgRepository
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 gitprovider.OrgRepository
		result2 error
	}
	GetStub        func(context.Context, gitprovider.OrgRepositoryRef) (gitprovider.OrgRepository, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 gitprovider.OrgRepositoryRef
	}
	getReturns struct {
		result1 gitprovider.OrgRepository
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 gitprovider.OrgRepository
		result2 error
	}
	ListStub        func(context.Context, gitprovider.OrganizationRef) ([]gitprovider.OrgRepository, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 gitprovider.OrganizationRef
	}
	listReturns struct {
		result1 []gitprovider.OrgRepository
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []gitprovider.OrgRepository
		result2 error
	}
	ReconcileStub        func(context.Context, gitprovider.OrgRepositoryRef, gitprovider.RepositoryInfo, ...gitprovider.RepositoryReconcileOption) (gitprovider.OrgRepository, bool, error)
	reconcileMutex       sync.RWMutex
	reconcileArgsForCall []struct {
		arg1 context.Context
		arg2 gitprovider.OrgRepositoryRef
		arg3 gitprovider.RepositoryInfo
		arg4 []gitprovider.RepositoryReconcileOption
	}
	reconcileReturns struct {
		result1 gitprovider.OrgRepository
		result2 bool
		result3 error
	}
	reconcileReturnsOnCall map[int]struct {
		result1 gitprovider.OrgRepository
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OrgRepositoriesClient) Create(arg1 context.Context, arg2 gitprovider.OrgRepositoryRef, arg3 gitprovider.RepositoryInfo, arg4 ...gitprovider.RepositoryCreateOption) (gitprovider.OrgRepository, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 gitprovider.OrgRepositoryRef
		arg3 gitprovider.RepositoryInfo
		arg4 []gitprovider.RepositoryCreateOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OrgRepositoriesClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *OrgRepositoriesClient) CreateCalls(stub func(context.Context, gitprovider.OrgRepositoryRef, gitprovider.RepositoryInfo, ...gitprovider.RepositoryCreateOption) (gitprovider.OrgRepository, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *OrgRepositoriesClient) CreateArgsForCall(i int) (context.Context, gitprovider.OrgRepositoryRef, gitprovider.RepositoryInfo, []gitprovider.RepositoryCreateOption) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *OrgRepositoriesClient) CreateReturns(result1 gitprovider.OrgRepository, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 gitprovider.OrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoriesClient) CreateReturnsOnCall(i int, result1 gitprovider.OrgRepository, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 gitprovider.OrgRepository
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 gitprovider.OrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoriesClient) Get(arg1 context.Context, arg2 gitprovider.OrgRepositoryRef) (gitprovider.OrgRepository, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 gitprovider.OrgRepositoryRef
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OrgRepositoriesClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *OrgRepositoriesClient) GetCalls(stub func(context.Context, gitprovider.OrgRepositoryRef) (gitprovider.OrgRepository, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *OrgRepositoriesClient) GetArgsForCall(i int) (context.Context, gitprovider.OrgRepositoryRef) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *OrgRepositoriesClient) GetReturns(result1 gitprovider.OrgRepository, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 gitprovider.OrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoriesClient) GetReturnsOnCall(i int, result1 gitprovider.OrgRepository, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 gitprovider.OrgRepository
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 gitprovider.OrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoriesClient) List(arg1 context.Context, arg2 gitprovider.OrganizationRef) ([]gitprovider.OrgRepository, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 gitprovider.OrganizationRef
	}{arg1, arg2})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OrgRepositoriesClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *OrgRepositoriesClient) ListCalls(stub func(context.Context, gitprovider.OrganizationRef) ([]gitprovider.OrgRepository, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *OrgRepositoriesClient) ListArgsForCall(i int) (context.Context, gitprovider.OrganizationRef) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *OrgRepositoriesClient) ListReturns(result1 []gitprovider.OrgRepository, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []gitprovider.OrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoriesClient) ListReturnsOnCall(i int, result1 []gitprovider.OrgRepository, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []gitprovider.OrgRepository
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []gitprovider.OrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoriesClient) Reconcile(arg1 context.Context, arg2 gitprovider.OrgRepositoryRef, arg3 gitprovider.RepositoryInfo, arg4 ...gitprovider.RepositoryReconcileOption) (gitprovider.OrgRepository, bool, error) {
	fake.reconcileMutex.Lock()
	ret, specificReturn := fake.reconcileReturnsOnCall[len(fake.reconcileArgsForCall)]
	fake.reconcileArgsForCall = append(fake.reconcileArgsForCall, struct {
		arg1 context.Context
		arg2 gitprovider.OrgRepositoryRef
		arg3 gitprovider.RepositoryInfo
		arg4 []gitprovider.RepositoryReconcileOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.ReconcileStub
	fakeReturns := fake.reconcileReturns
	fake.recordInvocation("Reconcile", []interface{}{arg1, arg2, arg3, arg4})
	fake.reconcileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *OrgRepositoriesClient) ReconcileCallCount() int {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	return len(fake.reconcileArgsForCall)
}

func (fake *OrgRepositoriesClient) ReconcileCalls(stub func(context.Context, gitprovider.OrgRepositoryRef, gitprovider.RepositoryInfo, ...gitprovider.RepositoryReconcileOption) (gitprovider.OrgRepository, bool, error)) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = stub
}

func (fake *OrgRepositoriesClient) ReconcileArgsForCall(i int) (context.Context, gitprovider.OrgRepositoryRef, gitprovider.RepositoryInfo, []gitprovider.RepositoryReconcileOption) {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	argsForCall := fake.reconcileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *OrgRepositoriesClient) ReconcileReturns(result1 gitprovider.OrgRepository, result2 bool, result3 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	fake.reconcileReturns = struct {
		result1 gitprovider.OrgRepository
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *OrgRepositoriesClient) ReconcileReturnsOnCall(i int, result1 gitprovider.OrgRepository, result2 bool, result3 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	if fake.reconcileReturnsOnCall == nil {
		fake.reconcileReturnsOnCall = make(map[int]struct {
			result1 gitprovider.OrgRepository
			result2 bool
			result3 error
		})
	}
	fake.reconcileReturnsOnCall[i] = struct {
		result1 gitprovider.OrgRepository
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *OrgRepositoriesClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OrgRepositoriesClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitprovider.OrgRepositoriesClient = new(OrgRepositoriesClient)

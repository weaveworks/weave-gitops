// Code generated by counterfeiter. DO NOT EDIT.
package fakegitprovider

import (
	"context"
	"sync"

	"github.com/fluxcd/go-git-providers/gitprovider"
)

type CommitClient struct {
	CreateStub        func(context.Context, string, string, []gitprovider.CommitFile) (gitprovider.Commit, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []gitprovider.CommitFile
	}
	createReturns struct {
		result1 gitprovider.Commit
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 gitprovider.Commit
		result2 error
	}
	ListPageStub        func(context.Context, string, int, int) ([]gitprovider.Commit, error)
	listPageMutex       sync.RWMutex
	listPageArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}
	listPageReturns struct {
		result1 []gitprovider.Commit
		result2 error
	}
	listPageReturnsOnCall map[int]struct {
		result1 []gitprovider.Commit
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CommitClient) Create(arg1 context.Context, arg2 string, arg3 string, arg4 []gitprovider.CommitFile) (gitprovider.Commit, error) {
	var arg4Copy []gitprovider.CommitFile
	if arg4 != nil {
		arg4Copy = make([]gitprovider.CommitFile, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []gitprovider.CommitFile
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CommitClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *CommitClient) CreateCalls(stub func(context.Context, string, string, []gitprovider.CommitFile) (gitprovider.Commit, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *CommitClient) CreateArgsForCall(i int) (context.Context, string, string, []gitprovider.CommitFile) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CommitClient) CreateReturns(result1 gitprovider.Commit, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 gitprovider.Commit
		result2 error
	}{result1, result2}
}

func (fake *CommitClient) CreateReturnsOnCall(i int, result1 gitprovider.Commit, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 gitprovider.Commit
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 gitprovider.Commit
		result2 error
	}{result1, result2}
}

func (fake *CommitClient) ListPage(arg1 context.Context, arg2 string, arg3 int, arg4 int) ([]gitprovider.Commit, error) {
	fake.listPageMutex.Lock()
	ret, specificReturn := fake.listPageReturnsOnCall[len(fake.listPageArgsForCall)]
	fake.listPageArgsForCall = append(fake.listPageArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListPageStub
	fakeReturns := fake.listPageReturns
	fake.recordInvocation("ListPage", []interface{}{arg1, arg2, arg3, arg4})
	fake.listPageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CommitClient) ListPageCallCount() int {
	fake.listPageMutex.RLock()
	defer fake.listPageMutex.RUnlock()
	return len(fake.listPageArgsForCall)
}

func (fake *CommitClient) ListPageCalls(stub func(context.Context, string, int, int) ([]gitprovider.Commit, error)) {
	fake.listPageMutex.Lock()
	defer fake.listPageMutex.Unlock()
	fake.ListPageStub = stub
}

func (fake *CommitClient) ListPageArgsForCall(i int) (context.Context, string, int, int) {
	fake.listPageMutex.RLock()
	defer fake.listPageMutex.RUnlock()
	argsForCall := fake.listPageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CommitClient) ListPageReturns(result1 []gitprovider.Commit, result2 error) {
	fake.listPageMutex.Lock()
	defer fake.listPageMutex.Unlock()
	fake.ListPageStub = nil
	fake.listPageReturns = struct {
		result1 []gitprovider.Commit
		result2 error
	}{result1, result2}
}

func (fake *CommitClient) ListPageReturnsOnCall(i int, result1 []gitprovider.Commit, result2 error) {
	fake.listPageMutex.Lock()
	defer fake.listPageMutex.Unlock()
	fake.ListPageStub = nil
	if fake.listPageReturnsOnCall == nil {
		fake.listPageReturnsOnCall = make(map[int]struct {
			result1 []gitprovider.Commit
			result2 error
		})
	}
	fake.listPageReturnsOnCall[i] = struct {
		result1 []gitprovider.Commit
		result2 error
	}{result1, result2}
}

func (fake *CommitClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CommitClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitprovider.CommitClient = new(CommitClient)

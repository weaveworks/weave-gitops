// Code generated by counterfeiter. DO NOT EDIT.
package fakegitprovider

import (
	"context"
	"sync"

	"github.com/fluxcd/go-git-providers/gitprovider"
)

type OrgRepository struct {
	APIObjectStub        func() interface{}
	aPIObjectMutex       sync.RWMutex
	aPIObjectArgsForCall []struct {
	}
	aPIObjectReturns struct {
		result1 interface{}
	}
	aPIObjectReturnsOnCall map[int]struct {
		result1 interface{}
	}
	BranchesStub        func() gitprovider.BranchClient
	branchesMutex       sync.RWMutex
	branchesArgsForCall []struct {
	}
	branchesReturns struct {
		result1 gitprovider.BranchClient
	}
	branchesReturnsOnCall map[int]struct {
		result1 gitprovider.BranchClient
	}
	CommitsStub        func() gitprovider.CommitClient
	commitsMutex       sync.RWMutex
	commitsArgsForCall []struct {
	}
	commitsReturns struct {
		result1 gitprovider.CommitClient
	}
	commitsReturnsOnCall map[int]struct {
		result1 gitprovider.CommitClient
	}
	DeleteStub        func(context.Context) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	DeployKeysStub        func() gitprovider.DeployKeyClient
	deployKeysMutex       sync.RWMutex
	deployKeysArgsForCall []struct {
	}
	deployKeysReturns struct {
		result1 gitprovider.DeployKeyClient
	}
	deployKeysReturnsOnCall map[int]struct {
		result1 gitprovider.DeployKeyClient
	}
	DeployTokensStub        func() (gitprovider.DeployTokenClient, error)
	deployTokensMutex       sync.RWMutex
	deployTokensArgsForCall []struct {
	}
	deployTokensReturns struct {
		result1 gitprovider.DeployTokenClient
		result2 error
	}
	deployTokensReturnsOnCall map[int]struct {
		result1 gitprovider.DeployTokenClient
		result2 error
	}
	FilesStub        func() gitprovider.FileClient
	filesMutex       sync.RWMutex
	filesArgsForCall []struct {
	}
	filesReturns struct {
		result1 gitprovider.FileClient
	}
	filesReturnsOnCall map[int]struct {
		result1 gitprovider.FileClient
	}
	GetStub        func() gitprovider.RepositoryInfo
	getMutex       sync.RWMutex
	getArgsForCall []struct {
	}
	getReturns struct {
		result1 gitprovider.RepositoryInfo
	}
	getReturnsOnCall map[int]struct {
		result1 gitprovider.RepositoryInfo
	}
	PullRequestsStub        func() gitprovider.PullRequestClient
	pullRequestsMutex       sync.RWMutex
	pullRequestsArgsForCall []struct {
	}
	pullRequestsReturns struct {
		result1 gitprovider.PullRequestClient
	}
	pullRequestsReturnsOnCall map[int]struct {
		result1 gitprovider.PullRequestClient
	}
	ReconcileStub        func(context.Context) (bool, error)
	reconcileMutex       sync.RWMutex
	reconcileArgsForCall []struct {
		arg1 context.Context
	}
	reconcileReturns struct {
		result1 bool
		result2 error
	}
	reconcileReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	RepositoryStub        func() gitprovider.RepositoryRef
	repositoryMutex       sync.RWMutex
	repositoryArgsForCall []struct {
	}
	repositoryReturns struct {
		result1 gitprovider.RepositoryRef
	}
	repositoryReturnsOnCall map[int]struct {
		result1 gitprovider.RepositoryRef
	}
	SetStub        func(gitprovider.RepositoryInfo) error
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 gitprovider.RepositoryInfo
	}
	setReturns struct {
		result1 error
	}
	setReturnsOnCall map[int]struct {
		result1 error
	}
	TeamAccessStub        func() gitprovider.TeamAccessClient
	teamAccessMutex       sync.RWMutex
	teamAccessArgsForCall []struct {
	}
	teamAccessReturns struct {
		result1 gitprovider.TeamAccessClient
	}
	teamAccessReturnsOnCall map[int]struct {
		result1 gitprovider.TeamAccessClient
	}
	TreesStub        func() gitprovider.TreeClient
	treesMutex       sync.RWMutex
	treesArgsForCall []struct {
	}
	treesReturns struct {
		result1 gitprovider.TreeClient
	}
	treesReturnsOnCall map[int]struct {
		result1 gitprovider.TreeClient
	}
	UpdateStub        func(context.Context) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OrgRepository) APIObject() interface{} {
	fake.aPIObjectMutex.Lock()
	ret, specificReturn := fake.aPIObjectReturnsOnCall[len(fake.aPIObjectArgsForCall)]
	fake.aPIObjectArgsForCall = append(fake.aPIObjectArgsForCall, struct {
	}{})
	stub := fake.APIObjectStub
	fakeReturns := fake.aPIObjectReturns
	fake.recordInvocation("APIObject", []interface{}{})
	fake.aPIObjectMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) APIObjectCallCount() int {
	fake.aPIObjectMutex.RLock()
	defer fake.aPIObjectMutex.RUnlock()
	return len(fake.aPIObjectArgsForCall)
}

func (fake *OrgRepository) APIObjectCalls(stub func() interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = stub
}

func (fake *OrgRepository) APIObjectReturns(result1 interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = nil
	fake.aPIObjectReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *OrgRepository) APIObjectReturnsOnCall(i int, result1 interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = nil
	if fake.aPIObjectReturnsOnCall == nil {
		fake.aPIObjectReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.aPIObjectReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *OrgRepository) Branches() gitprovider.BranchClient {
	fake.branchesMutex.Lock()
	ret, specificReturn := fake.branchesReturnsOnCall[len(fake.branchesArgsForCall)]
	fake.branchesArgsForCall = append(fake.branchesArgsForCall, struct {
	}{})
	stub := fake.BranchesStub
	fakeReturns := fake.branchesReturns
	fake.recordInvocation("Branches", []interface{}{})
	fake.branchesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) BranchesCallCount() int {
	fake.branchesMutex.RLock()
	defer fake.branchesMutex.RUnlock()
	return len(fake.branchesArgsForCall)
}

func (fake *OrgRepository) BranchesCalls(stub func() gitprovider.BranchClient) {
	fake.branchesMutex.Lock()
	defer fake.branchesMutex.Unlock()
	fake.BranchesStub = stub
}

func (fake *OrgRepository) BranchesReturns(result1 gitprovider.BranchClient) {
	fake.branchesMutex.Lock()
	defer fake.branchesMutex.Unlock()
	fake.BranchesStub = nil
	fake.branchesReturns = struct {
		result1 gitprovider.BranchClient
	}{result1}
}

func (fake *OrgRepository) BranchesReturnsOnCall(i int, result1 gitprovider.BranchClient) {
	fake.branchesMutex.Lock()
	defer fake.branchesMutex.Unlock()
	fake.BranchesStub = nil
	if fake.branchesReturnsOnCall == nil {
		fake.branchesReturnsOnCall = make(map[int]struct {
			result1 gitprovider.BranchClient
		})
	}
	fake.branchesReturnsOnCall[i] = struct {
		result1 gitprovider.BranchClient
	}{result1}
}

func (fake *OrgRepository) Commits() gitprovider.CommitClient {
	fake.commitsMutex.Lock()
	ret, specificReturn := fake.commitsReturnsOnCall[len(fake.commitsArgsForCall)]
	fake.commitsArgsForCall = append(fake.commitsArgsForCall, struct {
	}{})
	stub := fake.CommitsStub
	fakeReturns := fake.commitsReturns
	fake.recordInvocation("Commits", []interface{}{})
	fake.commitsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) CommitsCallCount() int {
	fake.commitsMutex.RLock()
	defer fake.commitsMutex.RUnlock()
	return len(fake.commitsArgsForCall)
}

func (fake *OrgRepository) CommitsCalls(stub func() gitprovider.CommitClient) {
	fake.commitsMutex.Lock()
	defer fake.commitsMutex.Unlock()
	fake.CommitsStub = stub
}

func (fake *OrgRepository) CommitsReturns(result1 gitprovider.CommitClient) {
	fake.commitsMutex.Lock()
	defer fake.commitsMutex.Unlock()
	fake.CommitsStub = nil
	fake.commitsReturns = struct {
		result1 gitprovider.CommitClient
	}{result1}
}

func (fake *OrgRepository) CommitsReturnsOnCall(i int, result1 gitprovider.CommitClient) {
	fake.commitsMutex.Lock()
	defer fake.commitsMutex.Unlock()
	fake.CommitsStub = nil
	if fake.commitsReturnsOnCall == nil {
		fake.commitsReturnsOnCall = make(map[int]struct {
			result1 gitprovider.CommitClient
		})
	}
	fake.commitsReturnsOnCall[i] = struct {
		result1 gitprovider.CommitClient
	}{result1}
}

func (fake *OrgRepository) Delete(arg1 context.Context) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *OrgRepository) DeleteCalls(stub func(context.Context) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *OrgRepository) DeleteArgsForCall(i int) context.Context {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OrgRepository) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *OrgRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OrgRepository) DeployKeys() gitprovider.DeployKeyClient {
	fake.deployKeysMutex.Lock()
	ret, specificReturn := fake.deployKeysReturnsOnCall[len(fake.deployKeysArgsForCall)]
	fake.deployKeysArgsForCall = append(fake.deployKeysArgsForCall, struct {
	}{})
	stub := fake.DeployKeysStub
	fakeReturns := fake.deployKeysReturns
	fake.recordInvocation("DeployKeys", []interface{}{})
	fake.deployKeysMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) DeployKeysCallCount() int {
	fake.deployKeysMutex.RLock()
	defer fake.deployKeysMutex.RUnlock()
	return len(fake.deployKeysArgsForCall)
}

func (fake *OrgRepository) DeployKeysCalls(stub func() gitprovider.DeployKeyClient) {
	fake.deployKeysMutex.Lock()
	defer fake.deployKeysMutex.Unlock()
	fake.DeployKeysStub = stub
}

func (fake *OrgRepository) DeployKeysReturns(result1 gitprovider.DeployKeyClient) {
	fake.deployKeysMutex.Lock()
	defer fake.deployKeysMutex.Unlock()
	fake.DeployKeysStub = nil
	fake.deployKeysReturns = struct {
		result1 gitprovider.DeployKeyClient
	}{result1}
}

func (fake *OrgRepository) DeployKeysReturnsOnCall(i int, result1 gitprovider.DeployKeyClient) {
	fake.deployKeysMutex.Lock()
	defer fake.deployKeysMutex.Unlock()
	fake.DeployKeysStub = nil
	if fake.deployKeysReturnsOnCall == nil {
		fake.deployKeysReturnsOnCall = make(map[int]struct {
			result1 gitprovider.DeployKeyClient
		})
	}
	fake.deployKeysReturnsOnCall[i] = struct {
		result1 gitprovider.DeployKeyClient
	}{result1}
}

func (fake *OrgRepository) DeployTokens() (gitprovider.DeployTokenClient, error) {
	fake.deployTokensMutex.Lock()
	ret, specificReturn := fake.deployTokensReturnsOnCall[len(fake.deployTokensArgsForCall)]
	fake.deployTokensArgsForCall = append(fake.deployTokensArgsForCall, struct {
	}{})
	stub := fake.DeployTokensStub
	fakeReturns := fake.deployTokensReturns
	fake.recordInvocation("DeployTokens", []interface{}{})
	fake.deployTokensMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OrgRepository) DeployTokensCallCount() int {
	fake.deployTokensMutex.RLock()
	defer fake.deployTokensMutex.RUnlock()
	return len(fake.deployTokensArgsForCall)
}

func (fake *OrgRepository) DeployTokensCalls(stub func() (gitprovider.DeployTokenClient, error)) {
	fake.deployTokensMutex.Lock()
	defer fake.deployTokensMutex.Unlock()
	fake.DeployTokensStub = stub
}

func (fake *OrgRepository) DeployTokensReturns(result1 gitprovider.DeployTokenClient, result2 error) {
	fake.deployTokensMutex.Lock()
	defer fake.deployTokensMutex.Unlock()
	fake.DeployTokensStub = nil
	fake.deployTokensReturns = struct {
		result1 gitprovider.DeployTokenClient
		result2 error
	}{result1, result2}
}

func (fake *OrgRepository) DeployTokensReturnsOnCall(i int, result1 gitprovider.DeployTokenClient, result2 error) {
	fake.deployTokensMutex.Lock()
	defer fake.deployTokensMutex.Unlock()
	fake.DeployTokensStub = nil
	if fake.deployTokensReturnsOnCall == nil {
		fake.deployTokensReturnsOnCall = make(map[int]struct {
			result1 gitprovider.DeployTokenClient
			result2 error
		})
	}
	fake.deployTokensReturnsOnCall[i] = struct {
		result1 gitprovider.DeployTokenClient
		result2 error
	}{result1, result2}
}

func (fake *OrgRepository) Files() gitprovider.FileClient {
	fake.filesMutex.Lock()
	ret, specificReturn := fake.filesReturnsOnCall[len(fake.filesArgsForCall)]
	fake.filesArgsForCall = append(fake.filesArgsForCall, struct {
	}{})
	stub := fake.FilesStub
	fakeReturns := fake.filesReturns
	fake.recordInvocation("Files", []interface{}{})
	fake.filesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) FilesCallCount() int {
	fake.filesMutex.RLock()
	defer fake.filesMutex.RUnlock()
	return len(fake.filesArgsForCall)
}

func (fake *OrgRepository) FilesCalls(stub func() gitprovider.FileClient) {
	fake.filesMutex.Lock()
	defer fake.filesMutex.Unlock()
	fake.FilesStub = stub
}

func (fake *OrgRepository) FilesReturns(result1 gitprovider.FileClient) {
	fake.filesMutex.Lock()
	defer fake.filesMutex.Unlock()
	fake.FilesStub = nil
	fake.filesReturns = struct {
		result1 gitprovider.FileClient
	}{result1}
}

func (fake *OrgRepository) FilesReturnsOnCall(i int, result1 gitprovider.FileClient) {
	fake.filesMutex.Lock()
	defer fake.filesMutex.Unlock()
	fake.FilesStub = nil
	if fake.filesReturnsOnCall == nil {
		fake.filesReturnsOnCall = make(map[int]struct {
			result1 gitprovider.FileClient
		})
	}
	fake.filesReturnsOnCall[i] = struct {
		result1 gitprovider.FileClient
	}{result1}
}

func (fake *OrgRepository) Get() gitprovider.RepositoryInfo {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
	}{})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *OrgRepository) GetCalls(stub func() gitprovider.RepositoryInfo) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *OrgRepository) GetReturns(result1 gitprovider.RepositoryInfo) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 gitprovider.RepositoryInfo
	}{result1}
}

func (fake *OrgRepository) GetReturnsOnCall(i int, result1 gitprovider.RepositoryInfo) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 gitprovider.RepositoryInfo
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 gitprovider.RepositoryInfo
	}{result1}
}

func (fake *OrgRepository) PullRequests() gitprovider.PullRequestClient {
	fake.pullRequestsMutex.Lock()
	ret, specificReturn := fake.pullRequestsReturnsOnCall[len(fake.pullRequestsArgsForCall)]
	fake.pullRequestsArgsForCall = append(fake.pullRequestsArgsForCall, struct {
	}{})
	stub := fake.PullRequestsStub
	fakeReturns := fake.pullRequestsReturns
	fake.recordInvocation("PullRequests", []interface{}{})
	fake.pullRequestsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) PullRequestsCallCount() int {
	fake.pullRequestsMutex.RLock()
	defer fake.pullRequestsMutex.RUnlock()
	return len(fake.pullRequestsArgsForCall)
}

func (fake *OrgRepository) PullRequestsCalls(stub func() gitprovider.PullRequestClient) {
	fake.pullRequestsMutex.Lock()
	defer fake.pullRequestsMutex.Unlock()
	fake.PullRequestsStub = stub
}

func (fake *OrgRepository) PullRequestsReturns(result1 gitprovider.PullRequestClient) {
	fake.pullRequestsMutex.Lock()
	defer fake.pullRequestsMutex.Unlock()
	fake.PullRequestsStub = nil
	fake.pullRequestsReturns = struct {
		result1 gitprovider.PullRequestClient
	}{result1}
}

func (fake *OrgRepository) PullRequestsReturnsOnCall(i int, result1 gitprovider.PullRequestClient) {
	fake.pullRequestsMutex.Lock()
	defer fake.pullRequestsMutex.Unlock()
	fake.PullRequestsStub = nil
	if fake.pullRequestsReturnsOnCall == nil {
		fake.pullRequestsReturnsOnCall = make(map[int]struct {
			result1 gitprovider.PullRequestClient
		})
	}
	fake.pullRequestsReturnsOnCall[i] = struct {
		result1 gitprovider.PullRequestClient
	}{result1}
}

func (fake *OrgRepository) Reconcile(arg1 context.Context) (bool, error) {
	fake.reconcileMutex.Lock()
	ret, specificReturn := fake.reconcileReturnsOnCall[len(fake.reconcileArgsForCall)]
	fake.reconcileArgsForCall = append(fake.reconcileArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ReconcileStub
	fakeReturns := fake.reconcileReturns
	fake.recordInvocation("Reconcile", []interface{}{arg1})
	fake.reconcileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OrgRepository) ReconcileCallCount() int {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	return len(fake.reconcileArgsForCall)
}

func (fake *OrgRepository) ReconcileCalls(stub func(context.Context) (bool, error)) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = stub
}

func (fake *OrgRepository) ReconcileArgsForCall(i int) context.Context {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	argsForCall := fake.reconcileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OrgRepository) ReconcileReturns(result1 bool, result2 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	fake.reconcileReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *OrgRepository) ReconcileReturnsOnCall(i int, result1 bool, result2 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	if fake.reconcileReturnsOnCall == nil {
		fake.reconcileReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.reconcileReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *OrgRepository) Repository() gitprovider.RepositoryRef {
	fake.repositoryMutex.Lock()
	ret, specificReturn := fake.repositoryReturnsOnCall[len(fake.repositoryArgsForCall)]
	fake.repositoryArgsForCall = append(fake.repositoryArgsForCall, struct {
	}{})
	stub := fake.RepositoryStub
	fakeReturns := fake.repositoryReturns
	fake.recordInvocation("Repository", []interface{}{})
	fake.repositoryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) RepositoryCallCount() int {
	fake.repositoryMutex.RLock()
	defer fake.repositoryMutex.RUnlock()
	return len(fake.repositoryArgsForCall)
}

func (fake *OrgRepository) RepositoryCalls(stub func() gitprovider.RepositoryRef) {
	fake.repositoryMutex.Lock()
	defer fake.repositoryMutex.Unlock()
	fake.RepositoryStub = stub
}

func (fake *OrgRepository) RepositoryReturns(result1 gitprovider.RepositoryRef) {
	fake.repositoryMutex.Lock()
	defer fake.repositoryMutex.Unlock()
	fake.RepositoryStub = nil
	fake.repositoryReturns = struct {
		result1 gitprovider.RepositoryRef
	}{result1}
}

func (fake *OrgRepository) RepositoryReturnsOnCall(i int, result1 gitprovider.RepositoryRef) {
	fake.repositoryMutex.Lock()
	defer fake.repositoryMutex.Unlock()
	fake.RepositoryStub = nil
	if fake.repositoryReturnsOnCall == nil {
		fake.repositoryReturnsOnCall = make(map[int]struct {
			result1 gitprovider.RepositoryRef
		})
	}
	fake.repositoryReturnsOnCall[i] = struct {
		result1 gitprovider.RepositoryRef
	}{result1}
}

func (fake *OrgRepository) Set(arg1 gitprovider.RepositoryInfo) error {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 gitprovider.RepositoryInfo
	}{arg1})
	stub := fake.SetStub
	fakeReturns := fake.setReturns
	fake.recordInvocation("Set", []interface{}{arg1})
	fake.setMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *OrgRepository) SetCalls(stub func(gitprovider.RepositoryInfo) error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *OrgRepository) SetArgsForCall(i int) gitprovider.RepositoryInfo {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OrgRepository) SetReturns(result1 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 error
	}{result1}
}

func (fake *OrgRepository) SetReturnsOnCall(i int, result1 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OrgRepository) TeamAccess() gitprovider.TeamAccessClient {
	fake.teamAccessMutex.Lock()
	ret, specificReturn := fake.teamAccessReturnsOnCall[len(fake.teamAccessArgsForCall)]
	fake.teamAccessArgsForCall = append(fake.teamAccessArgsForCall, struct {
	}{})
	stub := fake.TeamAccessStub
	fakeReturns := fake.teamAccessReturns
	fake.recordInvocation("TeamAccess", []interface{}{})
	fake.teamAccessMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) TeamAccessCallCount() int {
	fake.teamAccessMutex.RLock()
	defer fake.teamAccessMutex.RUnlock()
	return len(fake.teamAccessArgsForCall)
}

func (fake *OrgRepository) TeamAccessCalls(stub func() gitprovider.TeamAccessClient) {
	fake.teamAccessMutex.Lock()
	defer fake.teamAccessMutex.Unlock()
	fake.TeamAccessStub = stub
}

func (fake *OrgRepository) TeamAccessReturns(result1 gitprovider.TeamAccessClient) {
	fake.teamAccessMutex.Lock()
	defer fake.teamAccessMutex.Unlock()
	fake.TeamAccessStub = nil
	fake.teamAccessReturns = struct {
		result1 gitprovider.TeamAccessClient
	}{result1}
}

func (fake *OrgRepository) TeamAccessReturnsOnCall(i int, result1 gitprovider.TeamAccessClient) {
	fake.teamAccessMutex.Lock()
	defer fake.teamAccessMutex.Unlock()
	fake.TeamAccessStub = nil
	if fake.teamAccessReturnsOnCall == nil {
		fake.teamAccessReturnsOnCall = make(map[int]struct {
			result1 gitprovider.TeamAccessClient
		})
	}
	fake.teamAccessReturnsOnCall[i] = struct {
		result1 gitprovider.TeamAccessClient
	}{result1}
}

func (fake *OrgRepository) Trees() gitprovider.TreeClient {
	fake.treesMutex.Lock()
	ret, specificReturn := fake.treesReturnsOnCall[len(fake.treesArgsForCall)]
	fake.treesArgsForCall = append(fake.treesArgsForCall, struct {
	}{})
	stub := fake.TreesStub
	fakeReturns := fake.treesReturns
	fake.recordInvocation("Trees", []interface{}{})
	fake.treesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) TreesCallCount() int {
	fake.treesMutex.RLock()
	defer fake.treesMutex.RUnlock()
	return len(fake.treesArgsForCall)
}

func (fake *OrgRepository) TreesCalls(stub func() gitprovider.TreeClient) {
	fake.treesMutex.Lock()
	defer fake.treesMutex.Unlock()
	fake.TreesStub = stub
}

func (fake *OrgRepository) TreesReturns(result1 gitprovider.TreeClient) {
	fake.treesMutex.Lock()
	defer fake.treesMutex.Unlock()
	fake.TreesStub = nil
	fake.treesReturns = struct {
		result1 gitprovider.TreeClient
	}{result1}
}

func (fake *OrgRepository) TreesReturnsOnCall(i int, result1 gitprovider.TreeClient) {
	fake.treesMutex.Lock()
	defer fake.treesMutex.Unlock()
	fake.TreesStub = nil
	if fake.treesReturnsOnCall == nil {
		fake.treesReturnsOnCall = make(map[int]struct {
			result1 gitprovider.TreeClient
		})
	}
	fake.treesReturnsOnCall[i] = struct {
		result1 gitprovider.TreeClient
	}{result1}
}

func (fake *OrgRepository) Update(arg1 context.Context) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *OrgRepository) UpdateCalls(stub func(context.Context) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *OrgRepository) UpdateArgsForCall(i int) context.Context {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OrgRepository) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *OrgRepository) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OrgRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OrgRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitprovider.OrgRepository = new(OrgRepository)

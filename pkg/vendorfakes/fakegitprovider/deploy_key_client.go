// Code generated by counterfeiter. DO NOT EDIT.
package fakegitprovider

import (
	"context"
	"sync"

	"github.com/fluxcd/go-git-providers/gitprovider"
)

type DeployKeyClient struct {
	CreateStub        func(context.Context, gitprovider.DeployKeyInfo) (gitprovider.DeployKey, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 gitprovider.DeployKeyInfo
	}
	createReturns struct {
		result1 gitprovider.DeployKey
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 gitprovider.DeployKey
		result2 error
	}
	GetStub        func(context.Context, string) (gitprovider.DeployKey, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 gitprovider.DeployKey
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 gitprovider.DeployKey
		result2 error
	}
	ListStub        func(context.Context) ([]gitprovider.DeployKey, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
	}
	listReturns struct {
		result1 []gitprovider.DeployKey
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []gitprovider.DeployKey
		result2 error
	}
	ReconcileStub        func(context.Context, gitprovider.DeployKeyInfo) (gitprovider.DeployKey, bool, error)
	reconcileMutex       sync.RWMutex
	reconcileArgsForCall []struct {
		arg1 context.Context
		arg2 gitprovider.DeployKeyInfo
	}
	reconcileReturns struct {
		result1 gitprovider.DeployKey
		result2 bool
		result3 error
	}
	reconcileReturnsOnCall map[int]struct {
		result1 gitprovider.DeployKey
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DeployKeyClient) Create(arg1 context.Context, arg2 gitprovider.DeployKeyInfo) (gitprovider.DeployKey, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 gitprovider.DeployKeyInfo
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DeployKeyClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *DeployKeyClient) CreateCalls(stub func(context.Context, gitprovider.DeployKeyInfo) (gitprovider.DeployKey, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *DeployKeyClient) CreateArgsForCall(i int) (context.Context, gitprovider.DeployKeyInfo) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *DeployKeyClient) CreateReturns(result1 gitprovider.DeployKey, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 gitprovider.DeployKey
		result2 error
	}{result1, result2}
}

func (fake *DeployKeyClient) CreateReturnsOnCall(i int, result1 gitprovider.DeployKey, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 gitprovider.DeployKey
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 gitprovider.DeployKey
		result2 error
	}{result1, result2}
}

func (fake *DeployKeyClient) Get(arg1 context.Context, arg2 string) (gitprovider.DeployKey, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DeployKeyClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *DeployKeyClient) GetCalls(stub func(context.Context, string) (gitprovider.DeployKey, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *DeployKeyClient) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *DeployKeyClient) GetReturns(result1 gitprovider.DeployKey, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 gitprovider.DeployKey
		result2 error
	}{result1, result2}
}

func (fake *DeployKeyClient) GetReturnsOnCall(i int, result1 gitprovider.DeployKey, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 gitprovider.DeployKey
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 gitprovider.DeployKey
		result2 error
	}{result1, result2}
}

func (fake *DeployKeyClient) List(arg1 context.Context) ([]gitprovider.DeployKey, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DeployKeyClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *DeployKeyClient) ListCalls(stub func(context.Context) ([]gitprovider.DeployKey, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *DeployKeyClient) ListArgsForCall(i int) context.Context {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *DeployKeyClient) ListReturns(result1 []gitprovider.DeployKey, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []gitprovider.DeployKey
		result2 error
	}{result1, result2}
}

func (fake *DeployKeyClient) ListReturnsOnCall(i int, result1 []gitprovider.DeployKey, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []gitprovider.DeployKey
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []gitprovider.DeployKey
		result2 error
	}{result1, result2}
}

func (fake *DeployKeyClient) Reconcile(arg1 context.Context, arg2 gitprovider.DeployKeyInfo) (gitprovider.DeployKey, bool, error) {
	fake.reconcileMutex.Lock()
	ret, specificReturn := fake.reconcileReturnsOnCall[len(fake.reconcileArgsForCall)]
	fake.reconcileArgsForCall = append(fake.reconcileArgsForCall, struct {
		arg1 context.Context
		arg2 gitprovider.DeployKeyInfo
	}{arg1, arg2})
	stub := fake.ReconcileStub
	fakeReturns := fake.reconcileReturns
	fake.recordInvocation("Reconcile", []interface{}{arg1, arg2})
	fake.reconcileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *DeployKeyClient) ReconcileCallCount() int {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	return len(fake.reconcileArgsForCall)
}

func (fake *DeployKeyClient) ReconcileCalls(stub func(context.Context, gitprovider.DeployKeyInfo) (gitprovider.DeployKey, bool, error)) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = stub
}

func (fake *DeployKeyClient) ReconcileArgsForCall(i int) (context.Context, gitprovider.DeployKeyInfo) {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	argsForCall := fake.reconcileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *DeployKeyClient) ReconcileReturns(result1 gitprovider.DeployKey, result2 bool, result3 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	fake.reconcileReturns = struct {
		result1 gitprovider.DeployKey
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *DeployKeyClient) ReconcileReturnsOnCall(i int, result1 gitprovider.DeployKey, result2 bool, result3 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	if fake.reconcileReturnsOnCall == nil {
		fake.reconcileReturnsOnCall = make(map[int]struct {
			result1 gitprovider.DeployKey
			result2 bool
			result3 error
		})
	}
	fake.reconcileReturnsOnCall[i] = struct {
		result1 gitprovider.DeployKey
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *DeployKeyClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DeployKeyClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitprovider.DeployKeyClient = new(DeployKeyClient)
